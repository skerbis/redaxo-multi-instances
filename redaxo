#!/bin/bash

# REDAXO Multi-Instance Manager - Vereinfachte Version
# Ein Skript f√ºr alles: Instanzen erstellen, verwalten und SSL einrichten

# Farben
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Konfiguration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
PROJECT_DIR="$SCRIPT_DIR"
INSTANCES_DIR="$PROJECT_DIR/instances"
SSL_DIR="$PROJECT_DIR/ssl"

# === HELPER FUNCTIONS ===

show_help() {
    echo -e "${GREEN}üöÄ REDAXO Multi-Instance Manager${NC}"
    echo ""
    echo -e "${BLUE}Verwendung:${NC}"
    echo "  ./redaxo <command> [options]"
    echo ""
    echo -e "${BLUE}Commands:${NC}"
    echo "  ${YELLOW}create <name>${NC}     - Neue REDAXO-Instanz erstellen"
    echo "  ${YELLOW}start <name>${NC}      - Instanz starten"
    echo "  ${YELLOW}stop <name>${NC}       - Instanz stoppen"
    echo "  ${YELLOW}remove <name>${NC}     - Instanz l√∂schen"
    echo "  ${YELLOW}list${NC}              - Alle Instanzen anzeigen"
    echo "  ${YELLOW}urls <name>${NC}       - URLs einer Instanz anzeigen"
    echo "  ${YELLOW}db <name>${NC}         - Datenbank-Zugangsdaten anzeigen"
    echo "  ${YELLOW}ssl-setup${NC}         - SSL-Zertifikate einrichten"
    echo "  ${YELLOW}versions <name>${NC}   - PHP/MariaDB-Versionen einer Instanz anzeigen"
    echo "  ${YELLOW}update <name>${NC}     - PHP/MariaDB-Versionen einer Instanz aktualisieren"
    echo "  ${YELLOW}help${NC}              - Diese Hilfe anzeigen"
    echo ""
    echo -e "${BLUE}Create-Optionen:${NC}"
    echo "  ${YELLOW}--php-version <version>${NC}     - PHP-Version (Standard: 8.2)"
    echo "  ${YELLOW}--mariadb-version <version>${NC} - MariaDB-Version (Standard: latest)"
    echo "  ${YELLOW}--http-port <port>${NC}          - HTTP-Port (automatisch)"
    echo "  ${YELLOW}--https-port <port>${NC}         - HTTPS-Port (automatisch)"
    echo ""
    echo -e "${BLUE}Beispiele:${NC}"
    echo "  ./redaxo create mein-projekt"
    echo "  ./redaxo create mein-projekt --php-version 8.1 --mariadb-version 10.6"
    echo "  ./redaxo create mein-projekt --php-version 8.3"
    echo "  ./redaxo start mein-projekt"
    echo "  ./redaxo urls mein-projekt"
    echo "  ./redaxo db mein-projekt"
    echo "  ./redaxo versions mein-projekt"
    echo "  ./redaxo update mein-projekt --php-version 8.3"
    echo ""
    echo -e "${YELLOW}üí° Tipp: Nach 'create' wird die Instanz automatisch gestartet!${NC}"
    echo -e "${BLUE}üìã Verf√ºgbare PHP-Versionen:${NC} 7.4, 8.0, 8.1, 8.2, 8.3, 8.4"
    echo -e "${BLUE}üìã Verf√ºgbare MariaDB-Versionen:${NC} 10.4, 10.5, 10.6, 10.11, 11.0, latest"
}

instance_exists() {
    [ -d "$INSTANCES_DIR/$1" ]
}

find_available_port() {
    local start_port=$1
    local port=$start_port
    
    while [ $port -lt 65535 ]; do
        if ! lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            echo $port
            return
        fi
        ((port++))
    done
    
    echo "Fehler: Kein verf√ºgbarer Port gefunden" >&2
    exit 1
}

# === SSL FUNCTIONS ===

setup_ssl() {
    echo -e "${GREEN}üîí SSL-Setup f√ºr REDAXO${NC}"
    echo ""
    
    # Pr√ºfe ob mkcert installiert ist
    if ! command -v mkcert &> /dev/null; then
        echo -e "${YELLOW}üì¶ Installiere mkcert...${NC}"
        if command -v brew &> /dev/null; then
            brew install mkcert
        else
            echo -e "${RED}‚ùå Fehler: Homebrew nicht gefunden${NC}"
            echo -e "${YELLOW}Installieren Sie mkcert manuell: https://github.com/FiloSottile/mkcert${NC}"
            exit 1
        fi
    fi
    
    # Installiere CA
    echo -e "${YELLOW}üîß Installiere mkcert CA...${NC}"
    mkcert -install
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ SSL-Setup erfolgreich!${NC}"
        echo -e "${BLUE}üåê Safari und alle Browser vertrauen jetzt REDAXO SSL-Zertifikaten${NC}"
        
        # Regeneriere Zertifikate f√ºr existierende Instanzen
        if [ -d "$INSTANCES_DIR" ]; then
            echo -e "${YELLOW}üîÑ Aktualisiere bestehende Instanzen...${NC}"
            for instance_dir in "$INSTANCES_DIR"/*; do
                if [ -d "$instance_dir" ]; then
                    local name=$(basename "$instance_dir")
                    echo -e "${BLUE}  ‚Ä¢ $name${NC}"
                    generate_ssl_cert "$name"
                fi
            done
        fi
        
        echo -e "${GREEN}üéâ Fertig! Starten Sie Safari neu und testen Sie Ihre HTTPS-URLs.${NC}"
    else
        echo -e "${RED}‚ùå SSL-Setup fehlgeschlagen${NC}"
        exit 1
    fi
}

generate_ssl_cert() {
    local name=$1
    local cert_dir="$SSL_DIR/$name"
    
    echo -e "${YELLOW}üîê Generiere SSL-Zertifikat f√ºr $name...${NC}"
    
    mkdir -p "$cert_dir"
    cd "$cert_dir"
    
    # Generiere mkcert-Zertifikat
    mkcert -key-file private.key -cert-file cert.crt localhost 127.0.0.1 "$name.local" "*.local" >/dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        # Erstelle kombinierte Dateien f√ºr Docker
        cat cert.crt private.key > combined.pem
        cp cert.crt fullchain.crt
        echo -e "${GREEN}  ‚úÖ SSL-Zertifikat erstellt${NC}"
    else
        echo -e "${RED}  ‚ùå Fehler beim Erstellen des SSL-Zertifikats${NC}"
    fi
}

setup_dockerfile_ssl() {
    local name=$1
    local instance_dir="$INSTANCES_DIR/$name"
    
    echo -e "${YELLOW}üîß Konfiguriere SSL f√ºr $name...${NC}"
    echo -e "${GREEN}  ‚úÖ SSL-Zertifikate werden als Volumes gemountet${NC}"
    
    # Pr√ºfe ob SSL-Zertifikate existieren
    if [ -f "$SSL_DIR/$name/cert.crt" ] && [ -f "$SSL_DIR/$name/private.key" ]; then
        echo -e "${GREEN}  ‚úÖ SSL-Zertifikate gefunden und bereit${NC}"
    else
        echo -e "${RED}  ‚ùå SSL-Zertifikate nicht gefunden${NC}"
    fi
}

# === INSTANCE MANAGEMENT ===

create_instance() {
    local name=$1
    shift
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Fehler: Instanzname erforderlich${NC}"
        echo "Verwendung: ./redaxo create <name> [--php-version <version>] [--mariadb-version <version>]"
        exit 1
    fi
    
    if instance_exists "$name"; then
        echo -e "${RED}‚ùå Fehler: Instanz '$name' existiert bereits${NC}"
        exit 1
    fi
    
    # Standard-Versionen
    local php_version="8.2"
    local mariadb_version="latest"
    local custom_http_port=""
    local custom_https_port=""
    
    # Parse Argumente
    while [[ $# -gt 0 ]]; do
        case $1 in
            --php-version)
                php_version="$2"
                if ! validate_php_version "$php_version"; then
                    echo -e "${RED}‚ùå Ung√ºltige PHP-Version: $php_version${NC}"
                    echo -e "${YELLOW}Verf√ºgbare Versionen: 7.4, 8.0, 8.1, 8.2, 8.3${NC}"
                    exit 1
                fi
                shift 2
                ;;
            --mariadb-version)
                mariadb_version="$2"
                if ! validate_mariadb_version "$mariadb_version"; then
                    echo -e "${RED}‚ùå Ung√ºltige MariaDB-Version: $mariadb_version${NC}"
                    echo -e "${YELLOW}Verf√ºgbare Versionen: 10.4, 10.5, 10.6, 10.11, 11.0, latest${NC}"
                    exit 1
                fi
                shift 2
                ;;
            --http-port)
                custom_http_port="$2"
                shift 2
                ;;
            --https-port)
                custom_https_port="$2"
                shift 2
                ;;
            *)
                echo -e "${RED}‚ùå Unbekannte Option: $1${NC}"
                exit 1
                ;;
        esac
    done
    
    echo -e "${GREEN}üöÄ Erstelle REDAXO-Instanz '$name'${NC}"
    echo -e "${YELLOW}  üêò PHP-Version: $php_version${NC}"
    echo -e "${YELLOW}  üóÑÔ∏è  MariaDB-Version: $mariadb_version${NC}"
    
    # Finde verf√ºgbare Ports
    if [ -n "$custom_http_port" ]; then
        http_port="$custom_http_port"
    else
        http_port=$(find_available_port 8080)
    fi
    
    if [ -n "$custom_https_port" ]; then
        https_port="$custom_https_port"
    else
        https_port=$(find_available_port 8440)
    fi
    
    local phpmyadmin_port=$(find_available_port 8180)
    local mailhog_port=$(find_available_port 8120)
    
    echo -e "${BLUE}üìã Konfiguration:${NC}"
    echo "  ‚Ä¢ HTTP:       http://localhost:$http_port"
    echo "  ‚Ä¢ HTTPS:      https://localhost:$https_port"
    echo "  ‚Ä¢ phpMyAdmin: http://localhost:$phpmyadmin_port"
    echo "  ‚Ä¢ MailHog:    http://localhost:$mailhog_port"
    echo ""
    
    local instance_dir="$INSTANCES_DIR/$name"
    mkdir -p "$instance_dir"
    
    # Download REDAXO
    echo -e "${YELLOW}üì¶ Lade REDAXO herunter...${NC}"
    "$PROJECT_DIR/redaxo-downloader.sh" download latest --extract-to "$instance_dir/app" >/dev/null 2>&1
    
    if [ ! -d "$instance_dir/app" ]; then
        echo -e "${RED}‚ùå REDAXO-Download fehlgeschlagen${NC}"
        rm -rf "$instance_dir"
        exit 1
    fi
    
    # Kopiere Docker-Konfiguration
    cp -r "$PROJECT_DIR/docker" "$instance_dir/"
    
    # SSL-Zertifikat generieren
    generate_ssl_cert "$name"
    
    # SSL-Konfiguration in Dockerfile hinzuf√ºgen
    setup_dockerfile_ssl "$name"
    
    # Erstelle docker-compose.yml mit gew√§hlten Versionen
    create_docker_compose_with_versions "$name" "$http_port" "$https_port" "$phpmyadmin_port" "$mailhog_port" "$php_version" "$mariadb_version"
    
    # Erstelle .env-Datei
    create_env_file "$name" "$http_port" "$https_port" "$phpmyadmin_port" "$mailhog_port"
    
    echo -e "${GREEN}‚úÖ Instanz '$name' erfolgreich erstellt${NC}"
    echo ""
    
    # Starte Instanz automatisch
    echo -e "${YELLOW}üîÑ Starte Instanz...${NC}"
    start_instance "$name"
}

create_docker_compose() {
    local name=$1
    local http_port=$2
    local https_port=$3
    local phpmyadmin_port=$4
    local mailhog_port=$5
    
    # Standard-Versionen
    create_docker_compose_with_versions "$name" "$http_port" "$https_port" "$phpmyadmin_port" "$mailhog_port" "8.2" "latest"
}

create_docker_compose_with_versions() {
    local name=$1
    local http_port=$2
    local https_port=$3
    local phpmyadmin_port=$4
    local mailhog_port=$5
    local php_version=${6:-"8.2"}
    local mariadb_version=${7:-"latest"}
    
    cat > "$INSTANCES_DIR/$name/docker-compose.yml" << EOF
version: '3.8'

services:
  apache:
    build:
      context: ./docker/apache
      dockerfile: Dockerfile
      args:
        - PHP_VERSION=${php_version}
    container_name: redaxo-${name}-apache
    ports:
      - "${http_port}:80"
      - "${https_port}:443"
    volumes:
      - ./app:/var/www/html
      - ../../ssl/${name}/cert.crt:/etc/ssl/certs/cert.crt:ro
      - ../../ssl/${name}/private.key:/etc/ssl/private/private.key:ro
    depends_on:
      - mariadb
    networks:
      - redaxo-network
    environment:
      - APACHE_DOCUMENT_ROOT=/var/www/html/public

  mariadb:
    image: mariadb:${mariadb_version}
    container_name: redaxo-${name}-mariadb
    environment:
      MYSQL_ROOT_PASSWORD: \${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: \${MYSQL_DATABASE}
      MYSQL_USER: \${MYSQL_USER}
      MYSQL_PASSWORD: \${MYSQL_PASSWORD}
    volumes:
      - mariadb_data:/var/lib/mysql
    networks:
      - redaxo-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: redaxo-${name}-phpmyadmin
    environment:
      PMA_HOST: mariadb
      PMA_USER: \${MYSQL_USER}
      PMA_PASSWORD: \${MYSQL_PASSWORD}
    ports:
      - "${phpmyadmin_port}:80"
    depends_on:
      - mariadb
    networks:
      - redaxo-network

  mailhog:
    image: mailhog/mailhog
    container_name: redaxo-${name}-mailhog
    ports:
      - "${mailhog_port}:8025"
    networks:
      - redaxo-network

networks:
  redaxo-network:

volumes:
  mariadb_data:
EOF
}

create_env_file() {
    local name=$1
    local http_port=$2
    local https_port=$3
    local phpmyadmin_port=$4
    local mailhog_port=$5
    
    cat > "$INSTANCES_DIR/$name/.env" << EOF
# REDAXO Instance: $name
INSTANCE_NAME=$name

# Database
MYSQL_ROOT_PASSWORD=redaxo_root_$(date +%s)
MYSQL_DATABASE=redaxo_$name
MYSQL_USER=redaxo_$name
MYSQL_PASSWORD=redaxo_$(date +%s)

# Ports
HTTP_PORT=$http_port
HTTPS_PORT=$https_port
PHPMYADMIN_PORT=$phpmyadmin_port
MAILHOG_PORT=$mailhog_port
EOF
}

start_instance() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}üîÑ Starte '$name'...${NC}"
    
    cd "$INSTANCES_DIR/$name"
    docker-compose up -d >/dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ '$name' gestartet${NC}"
        echo ""
        show_urls "$name"
    else
        echo -e "${RED}‚ùå Fehler beim Starten${NC}"
        exit 1
    fi
}

stop_instance() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}‚èπÔ∏è  Stoppe '$name'...${NC}"
    
    cd "$INSTANCES_DIR/$name"
    docker-compose down >/dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ '$name' gestoppt${NC}"
    else
        echo -e "${RED}‚ùå Fehler beim Stoppen${NC}"
        exit 1
    fi
}

remove_instance() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}‚ö†Ô∏è  Instanz '$name' wirklich l√∂schen? (y/N)${NC}"
    read -r confirmation
    
    if [[ $confirmation =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}üóëÔ∏è  L√∂sche '$name'...${NC}"
        
        # Stoppe Instanz
        cd "$INSTANCES_DIR/$name"
        docker-compose down -v >/dev/null 2>&1
        
        # L√∂sche Dateien
        rm -rf "$INSTANCES_DIR/$name"
        rm -rf "$SSL_DIR/$name"
        
        echo -e "${GREEN}‚úÖ '$name' gel√∂scht${NC}"
    else
        echo -e "${YELLOW}‚ùå Abgebrochen${NC}"
    fi
}

list_instances() {
    echo -e "${GREEN}üìã REDAXO-Instanzen${NC}"
    echo ""
    
    if [ ! -d "$INSTANCES_DIR" ] || [ -z "$(ls -A "$INSTANCES_DIR" 2>/dev/null)" ]; then
        echo -e "${YELLOW}üì≠ Keine Instanzen gefunden${NC}"
        echo ""
        echo -e "${BLUE}üí° Erstellen Sie eine neue Instanz mit:${NC}"
        echo "   ./redaxo create mein-projekt"
        return
    fi
    
    for instance in "$INSTANCES_DIR"/*; do
        if [ -d "$instance" ]; then
            local name=$(basename "$instance")
            
            # Status pr√ºfen
            if docker ps --format "table {{.Names}}" | grep -q "redaxo-${name}-apache"; then
                echo -e "  ${GREEN}üü¢ $name${NC} (l√§uft)"
                show_instance_info "$name" "    "
            else
                echo -e "  ${RED}üî¥ $name${NC} (gestoppt)"
            fi
            echo ""
        fi
    done
    
    echo -e "${BLUE}üí° Befehle:${NC}"
    echo "   ./redaxo start <name>    - Instanz starten"
    echo "   ./redaxo urls <name>     - URLs anzeigen"
    echo "   ./redaxo db <name>       - DB-Zugangsdaten"
}

show_instance_info() {
    local name=$1
    local prefix=${2:-""}
    
    if [ -f "$INSTANCES_DIR/$name/.env" ]; then
        source "$INSTANCES_DIR/$name/.env"
        echo "${prefix}üåê http://localhost:$HTTP_PORT"
        echo "${prefix}üîí https://localhost:$HTTPS_PORT"
    fi
}

show_urls() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    source "$INSTANCES_DIR/$name/.env"
    
    echo -e "${GREEN}üåê URLs f√ºr '$name'${NC}"
    echo ""
    echo -e "${BLUE}REDAXO:${NC}"
    echo "  üåê HTTP:  http://localhost:$HTTP_PORT"
    echo "  üîí HTTPS: https://localhost:$HTTPS_PORT"
    echo ""
    echo -e "${BLUE}Tools:${NC}"
    echo "  üóÑÔ∏è  phpMyAdmin: http://localhost:$PHPMYADMIN_PORT"
    echo "  üìß MailHog:    http://localhost:$MAILHOG_PORT"
    echo ""
    
    # Status pr√ºfen
    if docker ps --format "table {{.Names}}" | grep -q "redaxo-${name}-apache"; then
        echo -e "${GREEN}‚úÖ Instanz l√§uft - URLs sind erreichbar${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è  Instanz gestoppt${NC}"
        echo -e "${YELLOW}üí° Starten mit: ./redaxo start $name${NC}"
    fi
}

show_db_config() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    source "$INSTANCES_DIR/$name/.env"
    
    echo -e "${GREEN}üóÑÔ∏è  Datenbank-Zugangsdaten f√ºr '$name'${NC}"
    echo ""
    echo -e "${BLUE}F√ºr REDAXO-Setup:${NC}"
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    echo "‚îÇ üñ•Ô∏è  Server:     mariadb                     ‚îÇ"
    printf "‚îÇ üóÑÔ∏è  Database:   %-23s ‚îÇ\n" "$MYSQL_DATABASE"
    printf "‚îÇ üë§ Username:   %-23s ‚îÇ\n" "$MYSQL_USER"
    printf "‚îÇ üîë Password:   %-23s ‚îÇ\n" "$MYSQL_PASSWORD"
    echo "‚îÇ üîå Port:       3306                        ‚îÇ"
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  Wichtig: Verwenden Sie 'mariadb' als Server, nicht 'localhost'!${NC}"
    echo -e "${BLUE}üí° Diese Daten beim ersten REDAXO-Setup eingeben.${NC}"
}

# === HELPER FUNCTIONS ===

# Versionspr√ºfung f√ºr PHP
validate_php_version() {
    local version=$1
    local valid_versions=("7.4" "8.0" "8.1" "8.2" "8.3" "8.4")
    
    for valid_version in "${valid_versions[@]}"; do
        if [ "$version" = "$valid_version" ]; then
            return 0
        fi
    done
    return 1
}

# Versionspr√ºfung f√ºr MariaDB
validate_mariadb_version() {
    local version=$1
    local valid_versions=("10.4" "10.5" "10.6" "10.11" "11.0" "latest")
    
    for valid_version in "${valid_versions[@]}"; do
        if [ "$version" = "$valid_version" ]; then
            return 0
        fi
    done
    return 1
}

# Zeige verf√ºgbare Versionen
show_versions() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}üìã Versionen f√ºr Instanz '$name':${NC}"
    echo ""
    
    # Aktuelle Versionen aus docker-compose.yml auslesen
    local compose_file="$INSTANCES_DIR/$name/docker-compose.yml"
    local php_version=$(grep "build: ./docker/apache" "$compose_file" >/dev/null 2>&1 && echo "Custom (siehe Dockerfile)" || grep "image: php:" "$compose_file" | head -1 | sed 's/.*php://' | sed 's/-.*//')
    local mariadb_version=$(grep "image: mariadb:" "$compose_file" | sed 's/.*mariadb://' | head -1)
    
    if [ -z "$php_version" ]; then
        php_version="8.2 (Standard)"
    fi
    if [ -z "$mariadb_version" ]; then
        mariadb_version="latest"
    fi
    
    echo -e "${BLUE}üêò Aktuelle PHP-Version:${NC} $php_version"
    echo -e "${BLUE}üóÑÔ∏è  Aktuelle MariaDB-Version:${NC} $mariadb_version"
    echo ""
    echo -e "${YELLOW}Verf√ºgbare PHP-Versionen:${NC}"
    echo "  7.4, 8.0, 8.1, 8.2, 8.3, 8.4"
    echo ""
    echo -e "${YELLOW}Verf√ºgbare MariaDB-Versionen:${NC}"
    echo "  10.4, 10.5, 10.6, 10.11, 11.0, latest"
    echo ""
    echo -e "${BLUE}Version √§ndern:${NC}"
    echo "  ./redaxo update $name --php-version 8.3"
    echo "  ./redaxo update $name --mariadb-version 10.6"
    echo "  ./redaxo update $name --php-version 8.1 --mariadb-version 11.0"
}

# Aktualisiere Versionen einer Instanz
update_instance_versions() {
    local name=$1
    shift
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    local php_version=""
    local mariadb_version=""
    local rebuild_containers=false
    
    # Parse Argumente
    while [[ $# -gt 0 ]]; do
        case $1 in
            --php-version)
                php_version="$2"
                if ! validate_php_version "$php_version"; then
                    echo -e "${RED}‚ùå Ung√ºltige PHP-Version: $php_version${NC}"
                    echo -e "${YELLOW}Verf√ºgbare Versionen: 7.4, 8.0, 8.1, 8.2, 8.3${NC}"
                    exit 1
                fi
                rebuild_containers=true
                shift 2
                ;;
            --mariadb-version)
                mariadb_version="$2"
                if ! validate_mariadb_version "$mariadb_version"; then
                    echo -e "${RED}‚ùå Ung√ºltige MariaDB-Version: $mariadb_version${NC}"
                    echo -e "${YELLOW}Verf√ºgbare Versionen: 10.4, 10.5, 10.6, 10.11, 11.0, latest${NC}"
                    exit 1
                fi
                rebuild_containers=true
                shift 2
                ;;
            *)
                echo -e "${RED}‚ùå Unbekannte Option: $1${NC}"
                exit 1
                ;;
        esac
    done
    
    if [ "$rebuild_containers" = false ]; then
        echo -e "${RED}‚ùå Keine Versions√§nderung angegeben${NC}"
        echo "Verwendung: ./redaxo update $name --php-version <version> [--mariadb-version <version>]"
        exit 1
    fi
    
    echo -e "${GREEN}üîÑ Aktualisiere Instanz '$name'${NC}"
    
    # Instanz stoppen
    echo -e "${YELLOW}  ‚èπ  Stoppe Instanz...${NC}"
    cd "$INSTANCES_DIR/$name"
    docker-compose down >/dev/null 2>&1
    
    # Backup der aktuellen docker-compose.yml
    cp docker-compose.yml "docker-compose.yml.backup.$(date +%Y%m%d_%H%M%S)"
    
    # Neue docker-compose.yml mit aktualisierten Versionen generieren
    local env_file="$INSTANCES_DIR/$name/.env"
    source "$env_file"
    
    # Verwende aktuelle Versionen falls nicht angegeben
    if [ -z "$php_version" ]; then
        php_version=$(grep "image: php:" docker-compose.yml | head -1 | sed 's/.*php://' | sed 's/-.*//' || echo "8.2")
    fi
    if [ -z "$mariadb_version" ]; then
        mariadb_version=$(grep "image: mariadb:" docker-compose.yml | sed 's/.*mariadb://' | head -1 || echo "latest")
    fi
    
    echo -e "${YELLOW}  üêò PHP-Version: $php_version${NC}"
    echo -e "${YELLOW}  üóÑÔ∏è  MariaDB-Version: $mariadb_version${NC}"
    
    # Generiere neue docker-compose.yml mit aktualisierten Versionen
    create_docker_compose_with_versions "$name" "$HTTP_PORT" "$HTTPS_PORT" "$PHPMYADMIN_PORT" "$MAILHOG_PORT" "$php_version" "$mariadb_version"
    
    # Container neu bauen und starten
    echo -e "${YELLOW}  üî® Baue Container neu...${NC}"
    docker-compose build --no-cache >/dev/null 2>&1
    
    echo -e "${YELLOW}  üöÄ Starte Instanz...${NC}"
    docker-compose up -d >/dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}  ‚úÖ Instanz erfolgreich aktualisiert${NC}"
        echo ""
        echo -e "${BLUE}üìã Neue Versionen:${NC}"
        echo -e "  üêò PHP: $php_version"
        echo -e "  üóÑÔ∏è  MariaDB: $mariadb_version"
    else
        echo -e "${RED}  ‚ùå Fehler beim Aktualisieren der Instanz${NC}"
        exit 1
    fi
}
# === MAIN LOGIC ===

case ${1:-help} in
    create)
        shift
        create_instance "$@"
        ;;
    start)
        start_instance "$2"
        ;;
    stop)
        stop_instance "$2"
        ;;
    remove|delete)
        remove_instance "$2"
        ;;
    list|ls)
        list_instances
        ;;
    urls)
        show_urls "$2"
        ;;
    db|database)
        show_db_config "$2"
        ;;
    ssl-setup|ssl)
        setup_ssl
        ;;
    versions|version)
        show_versions "$2"
        ;;
    update)
        shift
        update_instance_versions "$@"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå Unbekannter Befehl: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
