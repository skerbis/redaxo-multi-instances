#!/bin/bash

# REDAXO Multi-Instance Manager - Vereinfachte Version
# Ein Skript f√ºr alles: Instanzen erstellen, verwalten und SSL einrichten

# Farben
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Konfiguration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
PROJECT_DIR="$SCRIPT_DIR"
INSTANCES_DIR="$PROJECT_DIR/instances"
SSL_DIR="$PROJECT_DIR/ssl"
BACKUPS_DIR="$PROJECT_DIR/backups"

# === HELPER FUNCTIONS ===

# Erkennt automatisch den DocumentRoot basierend auf der REDAXO-Struktur
detect_document_root() {
    local instance_dir=$1
    local app_dir="$instance_dir/app"
    
    if [ -f "$app_dir/public/index.php" ]; then
        echo "/var/www/html/public"
    elif [ -f "$app_dir/index.php" ]; then
        echo "/var/www/html"
    else
        echo "/var/www/html"
    fi
}

show_help() {
    echo -e "${GREEN}üöÄ REDAXO Multi-Instance Manager${NC}"
    echo ""
    echo -e "${BLUE}Verwendung:${NC}"
    echo "  ./redaxo <command> [options]"
    echo ""
    echo -e "${BLUE}Commands:${NC}"
    echo "  ${YELLOW}create <name>${NC}     - Neue REDAXO- oder Webserver-Instanz erstellen"
    echo "  ${YELLOW}create <name> --auto${NC} - Mit automatischer REDAXO-Installation"
    echo "  ${YELLOW}start <name>${NC}      - Instanz starten"
    echo "  ${YELLOW}stop <name>${NC}       - Instanz stoppen"
    echo "  ${YELLOW}remove <name>${NC}     - Instanz l√∂schen"
    echo "  ${YELLOW}list${NC}              - Alle Instanzen anzeigen"
    echo "  ${YELLOW}urls <name>${NC}       - URLs einer Instanz anzeigen"
    echo "  ${YELLOW}db <name>${NC}         - Datenbank-Zugangsdaten anzeigen"
    echo "  ${YELLOW}ssl-setup${NC}         - SSL-Zertifikate einrichten"
    echo "  ${YELLOW}versions <name>${NC}   - PHP/MariaDB-Versionen einer Instanz anzeigen"
    echo "  ${YELLOW}update <name>${NC}     - PHP/MariaDB-Versionen einer Instanz aktualisieren"
    echo "  ${YELLOW}shell <name>${NC}      - Shell in Instanz √∂ffnen"
    echo "  ${YELLOW}backup <name>${NC}     - Backup einer Instanz erstellen"
    echo "  ${YELLOW}restore <name> <backup>${NC} - Backup wiederherstellen"
    echo "  ${YELLOW}backups${NC}           - Alle Backups anzeigen"
    echo "  ${YELLOW}cleanup${NC}           - Docker-System bereinigen (Orphans, Build-Cache)"
    echo "  ${YELLOW}help${NC}              - Diese Hilfe anzeigen"
    echo ""
    echo -e "${BLUE}Create-Optionen:${NC}"
    echo "  ${YELLOW}--type <type>${NC}               - Instanz-Typ: 'redaxo' oder 'webserver' (Standard: redaxo)"
    echo "  ${YELLOW}--auto${NC}                      - Automatische REDAXO-Installation (nur mit --type redaxo)"
    echo "  ${YELLOW}--php-version <version>${NC}     - PHP-Version (Standard: 8.4)"
    echo "  ${YELLOW}--mariadb-version <version>${NC} - MariaDB-Version (Standard: latest)"
    echo "  ${YELLOW}--http-port <port>${NC}          - HTTP-Port (automatisch)"
    echo "  ${YELLOW}--https-port <port>${NC}         - HTTPS-Port (automatisch)"
    echo "  ${YELLOW}--repo <owner/repo>${NC}         - GitHub-Repository (Standard: skerbis/REDAXO_MODERN_STRUCTURE)"
    echo ""
    echo -e "${BLUE}Beispiele:${NC}"
    echo "  ./redaxo create mein-projekt"
    echo "  ./redaxo create mein-projekt --auto"
    echo "  ./redaxo create mein-webserver --type webserver"
    echo "  ./redaxo create mein-projekt --php-version 8.1 --mariadb-version 10.6"
    echo "  ./redaxo create mein-projekt --php-version 8.3"
    echo "  ./redaxo create standard-redaxo --repo redaxo/redaxo"
    echo "  ./redaxo create test-server --type webserver --php-version 8.3"
    echo "  ./redaxo start mein-projekt"
    echo "  ./redaxo urls mein-projekt"
    echo "  ./redaxo db mein-projekt"
    echo "  ./redaxo versions mein-projekt"
    echo "  ./redaxo update mein-projekt --php-version 8.3"
    echo ""
    echo -e "${YELLOW}üí° Tipp: Nach 'create' wird die Instanz automatisch gestartet!${NC}"
    echo -e "${BLUE}üìã Verf√ºgbare PHP-Versionen:${NC} 7.4, 8.0, 8.1, 8.2, 8.3, 8.4"
    echo -e "${BLUE}üìã Verf√ºgbare MariaDB-Versionen:${NC} 10.4, 10.5, 10.6, 10.11, 11.0, latest"
}

instance_exists() {
    [ -d "$INSTANCES_DIR/$1" ]
}

find_available_port() {
    local start_port=$1
    local port=$start_port
    
    while [ $port -lt 65535 ]; do
        if ! lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            echo $port
            return
        fi
        ((port++))
    done
    
    echo "Fehler: Kein verf√ºgbarer Port gefunden" >&2
    exit 1
}

# === SSL FUNCTIONS ===

setup_ssl() {
    echo -e "${GREEN}üîí SSL-Setup f√ºr REDAXO${NC}"
    echo ""
    
    # Pr√ºfe ob mkcert installiert ist
    if ! command -v mkcert &> /dev/null; then
        echo -e "${YELLOW}üì¶ Installiere mkcert...${NC}"
        if command -v brew &> /dev/null; then
            brew install mkcert
        else
            echo -e "${RED}‚ùå Fehler: Homebrew nicht gefunden${NC}"
            echo -e "${YELLOW}Installieren Sie mkcert manuell: https://github.com/FiloSottile/mkcert${NC}"
            exit 1
        fi
    fi
    
    # Installiere CA
    echo -e "${YELLOW}üîß Installiere mkcert CA...${NC}"
    mkcert -install
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ SSL-Setup erfolgreich!${NC}"
        echo -e "${BLUE}üåê Safari und alle Browser vertrauen jetzt REDAXO SSL-Zertifikaten${NC}"
        
        # Regeneriere Zertifikate f√ºr existierende Instanzen
        if [ -d "$INSTANCES_DIR" ]; then
            echo -e "${YELLOW}üîÑ Aktualisiere bestehende Instanzen...${NC}"
            for instance_dir in "$INSTANCES_DIR"/*; do
                if [ -d "$instance_dir" ]; then
                    local name=$(basename "$instance_dir")
                    echo -e "${BLUE}  ‚Ä¢ $name${NC}"
                    generate_ssl_cert "$name"
                fi
            done
        fi
        
        echo -e "${GREEN}üéâ Fertig! Starten Sie Safari neu und testen Sie Ihre HTTPS-URLs.${NC}"
    else
        echo -e "${RED}‚ùå SSL-Setup fehlgeschlagen${NC}"
        exit 1
    fi
}

generate_ssl_cert() {
    local name=$1
    local cert_dir="$SSL_DIR/$name"
    
    echo -e "${YELLOW}üîê Generiere SSL-Zertifikat f√ºr $name...${NC}"
    
    mkdir -p "$cert_dir"
    cd "$cert_dir"
    
    # Generiere mkcert-Zertifikat
    mkcert -key-file private.key -cert-file cert.crt localhost 127.0.0.1 "$name.local" "*.local" >/dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        # Erstelle kombinierte Dateien f√ºr Docker
        cat cert.crt private.key > combined.pem
        cp cert.crt fullchain.crt
        echo -e "${GREEN}  ‚úÖ SSL-Zertifikat erstellt${NC}"
    else
        echo -e "${RED}  ‚ùå Fehler beim Erstellen des SSL-Zertifikats${NC}"
    fi
}

setup_dockerfile_ssl() {
    local name=$1
    local instance_dir="$INSTANCES_DIR/$name"
    
    echo -e "${YELLOW}üîß Konfiguriere SSL f√ºr $name...${NC}"
    echo -e "${GREEN}  ‚úÖ SSL-Zertifikate werden als Volumes gemountet${NC}"
    
    # Pr√ºfe ob SSL-Zertifikate existieren
    if [ -f "$SSL_DIR/$name/cert.crt" ] && [ -f "$SSL_DIR/$name/private.key" ]; then
        echo -e "${GREEN}  ‚úÖ SSL-Zertifikate gefunden und bereit${NC}"
    else
        echo -e "${RED}  ‚ùå SSL-Zertifikate nicht gefunden${NC}"
    fi
}

# === INSTANCE MANAGEMENT ===

create_instance() {
    local name=$1
    shift
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Fehler: Instanzname erforderlich${NC}"
        echo "Verwendung: ./redaxo create <name> [--php-version <version>] [--mariadb-version <version>]"
        exit 1
    fi
    
    if instance_exists "$name"; then
        echo -e "${RED}‚ùå Fehler: Instanz '$name' existiert bereits${NC}"
        exit 1
    fi
    
    # Standard-Versionen
    local php_version="8.4"
    local mariadb_version="latest"
    local custom_http_port=""
    local custom_https_port=""
    local custom_repo=""
    local instance_type="redaxo"
    local auto_install=false
    
    # Parse Argumente
    while [[ $# -gt 0 ]]; do
        case $1 in
            --type)
                instance_type="$2"
                if [ "$instance_type" != "redaxo" ] && [ "$instance_type" != "webserver" ]; then
                    echo -e "${RED}‚ùå Ung√ºltiger Instanz-Typ: $instance_type${NC}"
                    echo -e "${YELLOW}Verf√ºgbare Typen: redaxo, webserver${NC}"
                    exit 1
                fi
                shift 2
                ;;
            --php-version)
                php_version="$2"
                if ! validate_php_version "$php_version"; then
                    echo -e "${RED}‚ùå Ung√ºltige PHP-Version: $php_version${NC}"
                    echo -e "${YELLOW}Verf√ºgbare Versionen: 7.4, 8.0, 8.1, 8.2, 8.3, 8.4${NC}"
                    exit 1
                fi
                shift 2
                ;;
            --mariadb-version)
                mariadb_version="$2"
                if ! validate_mariadb_version "$mariadb_version"; then
                    echo -e "${RED}‚ùå Ung√ºltige MariaDB-Version: $mariadb_version${NC}"
                    echo -e "${YELLOW}Verf√ºgbare Versionen: 10.4, 10.5, 10.6, 10.11, 11.0, latest${NC}"
                    exit 1
                fi
                shift 2
                ;;
            --http-port)
                custom_http_port="$2"
                shift 2
                ;;
            --https-port)
                custom_https_port="$2"
                shift 2
                ;;
            --repo)
                custom_repo="$2"
                shift 2
                ;;
            --auto)
                auto_install=true
                shift
                ;;
            *)
                echo -e "${RED}‚ùå Unbekannte Option: $1${NC}"
                exit 1
                ;;
        esac
    done
    
    # Validiere Auto-Install nur f√ºr REDAXO-Instanzen
    if [ "$auto_install" = true ] && [ "$instance_type" != "redaxo" ]; then
        echo -e "${RED}‚ùå Automatische Installation ist nur f√ºr REDAXO-Instanzen verf√ºgbar${NC}"
        exit 1
    fi
    
    if [ "$instance_type" = "webserver" ]; then
        echo -e "${GREEN}üåê Erstelle Webserver-Instanz '$name'${NC}"
    else
        echo -e "${GREEN}üöÄ Erstelle REDAXO-Instanz '$name'${NC}"
        if [ "$auto_install" = true ]; then
            echo -e "${BLUE}  ü§ñ Mit automatischer Installation${NC}"
        fi
    fi
    echo -e "${YELLOW}  üêò PHP-Version: $php_version${NC}"
    if [ "$instance_type" = "redaxo" ]; then
        echo -e "${YELLOW}  üóÑÔ∏è  MariaDB-Version: $mariadb_version${NC}"
    fi
    
    # Finde verf√ºgbare Ports
    if [ -n "$custom_http_port" ]; then
        http_port="$custom_http_port"
    else
        http_port=$(find_available_port 8080)
    fi
    
    if [ -n "$custom_https_port" ]; then
        https_port="$custom_https_port"
    else
        https_port=$(find_available_port 8440)
    fi
    
    if [ "$instance_type" = "webserver" ]; then
        local phpmyadmin_port=""
        local mailpit_port=""
        
        echo -e "${BLUE}üìã Konfiguration:${NC}"
        echo "  ‚Ä¢ HTTP:  http://localhost:$http_port"
        echo "  ‚Ä¢ HTTPS: https://localhost:$https_port"
        echo ""
    else
        local phpmyadmin_port=$(find_available_port 8180)
        local mailpit_port=$(find_available_port 8120)
        
        echo -e "${BLUE}üìã Konfiguration:${NC}"
        echo "  ‚Ä¢ HTTP:       http://localhost:$http_port"
        echo "  ‚Ä¢ HTTPS:      https://localhost:$https_port"
        echo "  ‚Ä¢ phpMyAdmin: http://localhost:$phpmyadmin_port"
        echo "  ‚Ä¢ Mailpit:    http://localhost:$mailpit_port"
        echo ""
    fi
    
    local instance_dir="$INSTANCES_DIR/$name"
    mkdir -p "$instance_dir"
    
    if [ "$instance_type" = "webserver" ]; then
        # Erstelle einfache Webserver-Struktur
        echo -e "${YELLOW}üåê Erstelle Webserver-Struktur...${NC}"
        mkdir -p "$instance_dir/app"
        create_webserver_index "$name" "$instance_dir/app/index.php" "$http_port" "$https_port" "$php_version"
    else
        # Download REDAXO
        echo -e "${YELLOW}üì¶ Lade REDAXO herunter...${NC}"
        if [ -n "$custom_repo" ]; then
            "$PROJECT_DIR/redaxo-downloader.sh" download latest --repo "$custom_repo" --extract-to "$instance_dir/app" >/dev/null 2>&1
        else
            "$PROJECT_DIR/redaxo-downloader.sh" download latest --extract-to "$instance_dir/app" >/dev/null 2>&1
        fi
        
        if [ ! -d "$instance_dir/app" ]; then
            echo -e "${RED}‚ùå REDAXO-Download fehlgeschlagen${NC}"
            rm -rf "$instance_dir"
            exit 1
        fi
    fi
    
    # Kopiere Docker-Konfiguration
    cp -r "$PROJECT_DIR/docker" "$instance_dir/"
    
    # Erkenne DocumentRoot und passe Apache-Konfiguration an
    local document_root=$(detect_document_root "$instance_dir")
    if [ "$instance_type" = "webserver" ]; then
        echo -e "${YELLOW}üîß Webserver DocumentRoot: /var/www/html${NC}"
        document_root="/var/www/html"
    else
        echo -e "${YELLOW}üîß Erkenne DocumentRoot: $document_root${NC}"
    fi
    
    # Passe Apache-Konfiguration an
    if [ "$instance_type" = "webserver" ]; then
        echo -e "${BLUE}üåê Webserver-Instanz - DocumentRoot: $document_root${NC}"
        # F√ºr Webserver immer /var/www/html verwenden
        sed -i '' 's|/var/www/html/public|/var/www/html|g' "$instance_dir/docker/apache/apache-vhost.conf"
    elif [ "$document_root" = "/var/www/html" ]; then
        echo -e "${BLUE}üìÅ Standard-REDAXO erkannt - DocumentRoot: $document_root${NC}"
        # Ersetze /var/www/html/public mit /var/www/html in der Apache-Konfiguration
        sed -i '' 's|/var/www/html/public|/var/www/html|g' "$instance_dir/docker/apache/apache-vhost.conf"
    else
        echo -e "${BLUE}üìÅ Modern Structure erkannt - DocumentRoot: $document_root${NC}"
    fi
    
    # SSL-Zertifikat generieren
    generate_ssl_cert "$name"
    
    # SSL-Konfiguration in Dockerfile hinzuf√ºgen
    setup_dockerfile_ssl "$name"
    
    # Erstelle docker-compose.yml mit gew√§hlten Versionen
    if [ "$instance_type" = "webserver" ]; then
        create_webserver_docker_compose "$name" "$http_port" "$https_port" "$php_version"
    else
        create_docker_compose_with_versions "$name" "$http_port" "$https_port" "$phpmyadmin_port" "$mailpit_port" "$php_version" "$mariadb_version"
    fi
    
    # Erstelle .env-Datei
    if [ "$instance_type" = "webserver" ]; then
        create_webserver_env_file "$name" "$http_port" "$https_port"
    else
        create_env_file "$name" "$http_port" "$https_port" "$phpmyadmin_port" "$mailpit_port"
    fi
    
    echo -e "${GREEN}‚úÖ Instanz '$name' erfolgreich erstellt${NC}"
    echo ""
    
    # Starte Instanz automatisch
    echo -e "${YELLOW}üîÑ Starte Instanz...${NC}"
    start_instance "$name"
    
    # Automatische REDAXO-Installation wenn gew√ºnscht
    if [ "$auto_install" = true ] && [ "$instance_type" = "redaxo" ]; then
        echo ""
        echo -e "${YELLOW}ü§ñ Starte automatische REDAXO-Installation...${NC}"
        auto_install_redaxo "$name"
    fi
}

create_docker_compose() {
    local name=$1
    local http_port=$2
    local https_port=$3
    local phpmyadmin_port=$4
    local mailpit_port=$5
    
    # Standard-Versionen
    create_docker_compose_with_versions "$name" "$http_port" "$https_port" "$phpmyadmin_port" "$mailpit_port" "8.4" "latest"
}

create_docker_compose_with_versions() {
    local name=$1
    local http_port=$2
    local https_port=$3
    local phpmyadmin_port=$4
    local mailpit_port=$5
    local php_version=${6:-"8.2"}
    local mariadb_version=${7:-"latest"}
    
    # Erkenne DocumentRoot f√ºr diese Instanz
    local document_root=$(detect_document_root "$INSTANCES_DIR/$name")
    
    cat > "$INSTANCES_DIR/$name/docker-compose.yml" << EOF
version: '3.8'

services:
  apache:
    build:
      context: ./docker/apache
      dockerfile: Dockerfile
      args:
        - PHP_VERSION=${php_version}
    container_name: redaxo-${name}-apache
    ports:
      - "\${HTTP_PORT}:80"
      - "\${HTTPS_PORT}:443"
    volumes:
      - ./app:/var/www/html
      - ../../ssl/${name}/cert.crt:/etc/ssl/certs/cert.crt:ro
      - ../../ssl/${name}/private.key:/etc/ssl/private/private.key:ro
    depends_on:
      - mariadb
    networks:
      - redaxo-network
    environment:
      - APACHE_DOCUMENT_ROOT=${document_root}

  mariadb:
    image: mariadb:${mariadb_version}
    container_name: redaxo-${name}-mariadb
    environment:
      MYSQL_ROOT_PASSWORD: \${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: \${MYSQL_DATABASE}
      MYSQL_USER: \${MYSQL_USER}
      MYSQL_PASSWORD: \${MYSQL_PASSWORD}
    volumes:
      - mariadb_data:/var/lib/mysql
    networks:
      - redaxo-network

  phpmyadmin:
    image: phpmyadmin:latest
    container_name: redaxo-${name}-phpmyadmin
    environment:
      PMA_HOST: mariadb
      PMA_USER: \${MYSQL_USER}
      PMA_PASSWORD: \${MYSQL_PASSWORD}
    ports:
      - "\${PHPMYADMIN_PORT}:80"
    depends_on:
      - mariadb
    networks:
      - redaxo-network

  mailpit:
    image: axllent/mailpit:latest
    container_name: redaxo-${name}-mailpit
    ports:
      - "\${MAILPIT_PORT}:8025"
      - "1025:1025"
    networks:
      - redaxo-network
    environment:
      - MP_SMTP_AUTH_ACCEPT_ANY=1
      - MP_SMTP_AUTH_ALLOW_INSECURE=1

networks:
  redaxo-network:

volumes:
  mariadb_data:
EOF
}

create_env_file() {
    local name=$1
    local http_port=$2
    local https_port=$3
    local phpmyadmin_port=$4
    local mailpit_port=$5
    
    cat > "$INSTANCES_DIR/$name/.env" << EOF
# REDAXO Instance: $name
INSTANCE_NAME=$name

# Database
MYSQL_ROOT_PASSWORD=redaxo_root_$(date +%s)
MYSQL_DATABASE=redaxo_$name
MYSQL_USER=redaxo_$name
MYSQL_PASSWORD=redaxo_$(date +%s)

# Ports
HTTP_PORT=$http_port
HTTPS_PORT=$https_port
PHPMYADMIN_PORT=$phpmyadmin_port
MAILPIT_PORT=$mailpit_port
EOF
}

# === WEBSERVER FUNCTIONS ===

create_webserver_index() {
    local name=$1
    local index_file=$2
    local http_port=$3
    local https_port=$4
    local php_version=$5
    
    cat > "$index_file" << 'EOF'
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo $_SERVER['HTTP_HOST']; ?> - Webserver Info</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .container {
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            padding: 40px;
            max-width: 800px;
            width: 100%;
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
        }
        
        .header h1 {
            color: #333;
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 700;
        }
        
        .header .subtitle {
            color: #666;
            font-size: 1.2em;
        }
        
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }
        
        .info-card {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 25px;
            border-left: 4px solid #667eea;
        }
        
        .info-card h3 {
            color: #333;
            font-size: 1.1em;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
        }
        
        .info-card .icon {
            margin-right: 10px;
            font-size: 1.2em;
        }
        
        .info-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        
        .info-item:last-child {
            border-bottom: none;
            margin-bottom: 0;
        }
        
        .info-label {
            font-weight: 600;
            color: #555;
        }
        
        .info-value {
            color: #333;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.9em;
        }
        
        .status-ok {
            color: #28a745;
            font-weight: bold;
        }
        
        .footer {
            text-align: center;
            color: #666;
            font-size: 0.9em;
            border-top: 1px solid #eee;
            padding-top: 20px;
        }
        
        .timestamp {
            background: #e9ecef;
            padding: 10px;
            border-radius: 5px;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.9em;
            color: #495057;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üåê Webserver-Instanz</h1>
            <div class="subtitle"><?php echo gethostname(); ?></div>
        </div>
        
        <div class="info-grid">
            <div class="info-card">
                <h3><span class="icon">üñ•Ô∏è</span>Server-Info</h3>
                <div class="info-item">
                    <span class="info-label">Instanz:</span>
                    <span class="info-value"><?php echo getenv('INSTANCE_NAME') ?: 'N/A'; ?></span>
                </div>
                <div class="info-item">
                    <span class="info-label">Host:</span>
                    <span class="info-value"><?php echo $_SERVER['HTTP_HOST']; ?></span>
                </div>
                <div class="info-item">
                    <span class="info-label">Port:</span>
                    <span class="info-value"><?php echo $_SERVER['SERVER_PORT']; ?></span>
                </div>
                <div class="info-item">
                    <span class="info-label">Protokoll:</span>
                    <span class="info-value"><?php echo isset($_SERVER['HTTPS']) ? 'HTTPS' : 'HTTP'; ?></span>
                </div>
            </div>
            
            <div class="info-card">
                <h3><span class="icon">üêò</span>PHP-Info</h3>
                <div class="info-item">
                    <span class="info-label">Version:</span>
                    <span class="info-value status-ok"><?php echo PHP_VERSION; ?></span>
                </div>
                <div class="info-item">
                    <span class="info-label">SAPI:</span>
                    <span class="info-value"><?php echo php_sapi_name(); ?></span>
                </div>
                <div class="info-item">
                    <span class="info-label">Extensions:</span>
                    <span class="info-value"><?php echo count(get_loaded_extensions()); ?> geladen</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Memory Limit:</span>
                    <span class="info-value"><?php echo ini_get('memory_limit'); ?></span>
                </div>
            </div>
            
            <div class="info-card">
                <h3><span class="icon">üåê</span>URLs</h3>
                <div class="info-item">
                    <span class="info-label">HTTP:</span>
                    <span class="info-value">
                        <a href="http://localhost:<?php echo getenv('HTTP_PORT') ?: '80'; ?>" target="_blank">
                            http://localhost:<?php echo getenv('HTTP_PORT') ?: '80'; ?>
                        </a>
                    </span>
                </div>
                <div class="info-item">
                    <span class="info-label">HTTPS:</span>
                    <span class="info-value">
                        <a href="https://localhost:<?php echo getenv('HTTPS_PORT') ?: '443'; ?>" target="_blank">
                            https://localhost:<?php echo getenv('HTTPS_PORT') ?: '443'; ?>
                        </a>
                    </span>
                </div>
            </div>
            
            <div class="info-card">
                <h3><span class="icon">üìÅ</span>Dateisystem</h3>
                <div class="info-item">
                    <span class="info-label">Document Root:</span>
                    <span class="info-value"><?php echo $_SERVER['DOCUMENT_ROOT']; ?></span>
                </div>
                <div class="info-item">
                    <span class="info-label">Script:</span>
                    <span class="info-value"><?php echo basename($_SERVER['SCRIPT_FILENAME']); ?></span>
                </div>
                <div class="info-item">
                    <span class="info-label">Writable:</span>
                    <span class="info-value status-ok"><?php echo is_writable($_SERVER['DOCUMENT_ROOT']) ? 'Ja' : 'Nein'; ?></span>
                </div>
            </div>
        </div>
        
        <div class="timestamp">
            Zuletzt aktualisiert: <?php echo date('d.m.Y H:i:s'); ?>
        </div>
        
        <div class="footer">
            <p>üöÄ REDAXO Multi-Instance Manager - Webserver-Instanz</p>
            <p>Erstellt mit dem REDAXO Multi-Instance Manager</p>
        </div>
    </div>
</body>
</html>
EOF

    echo -e "${GREEN}  ‚úÖ Informative index.php erstellt${NC}"
}

create_webserver_docker_compose() {
    local name=$1
    local http_port=$2
    local https_port=$3
    local php_version=$4
    
    cat > "$INSTANCES_DIR/$name/docker-compose.yml" << EOF
version: '3.8'

services:
  apache:
    build:
      context: ./docker/apache
      dockerfile: Dockerfile
      args:
        - PHP_VERSION=${php_version}
    container_name: webserver-${name}-apache
    ports:
      - "\${HTTP_PORT}:80"
      - "\${HTTPS_PORT}:443"
    volumes:
      - ./app:/var/www/html
      - ../../ssl/${name}/cert.crt:/etc/ssl/certs/cert.crt:ro
      - ../../ssl/${name}/private.key:/etc/ssl/private/private.key:ro
    networks:
      - webserver-network
    environment:
      - INSTANCE_NAME=${name}
      - HTTP_PORT=${http_port}
      - HTTPS_PORT=${https_port}

networks:
  webserver-network:
EOF
}

create_webserver_env_file() {
    local name=$1
    local http_port=$2
    local https_port=$3
    
    cat > "$INSTANCES_DIR/$name/.env" << EOF
# Webserver Instance: $name
INSTANCE_NAME=$name

# Ports
HTTP_PORT=$http_port
HTTPS_PORT=$https_port
EOF
}

start_instance() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}üîÑ Starte '$name'...${NC}"
    
    cd "$INSTANCES_DIR/$name"
    docker-compose up -d >/dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ '$name' gestartet${NC}"
        echo ""
        show_urls "$name"
    else
        echo -e "${RED}‚ùå Fehler beim Starten${NC}"
        exit 1
    fi
}

stop_instance() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}‚èπÔ∏è  Stoppe '$name'...${NC}"
    
    cd "$INSTANCES_DIR/$name"
    docker-compose down >/dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ '$name' gestoppt${NC}"
    else
        echo -e "${RED}‚ùå Fehler beim Stoppen${NC}"
        exit 1
    fi
}

remove_instance() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}‚ö†Ô∏è  Instanz '$name' wirklich l√∂schen? (y/N)${NC}"
    read -r confirmation
    
    if [[ $confirmation =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}üóëÔ∏è  L√∂sche '$name'...${NC}"
        
        # Stoppe Instanz
        cd "$INSTANCES_DIR/$name"
        docker-compose down -v >/dev/null 2>&1
        
        # L√∂sche Dateien
        rm -rf "$INSTANCES_DIR/$name"
        rm -rf "$SSL_DIR/$name"
        
        echo -e "${GREEN}‚úÖ '$name' gel√∂scht${NC}"
    else
        echo -e "${YELLOW}‚ùå Abgebrochen${NC}"
    fi
}

list_instances() {
    echo -e "${GREEN}üìã Alle Instanzen${NC}"
    echo ""
    
    if [ ! -d "$INSTANCES_DIR" ] || [ -z "$(ls -A "$INSTANCES_DIR" 2>/dev/null)" ]; then
        echo -e "${YELLOW}üì≠ Keine Instanzen gefunden${NC}"
        echo ""
        echo -e "${BLUE}üí° Erstellen Sie eine neue Instanz mit:${NC}"
        echo "   ./redaxo create mein-projekt"
        echo "   ./redaxo create mein-webserver --type webserver"
        return
    fi
    
    for instance in "$INSTANCES_DIR"/*; do
        if [ -d "$instance" ]; then
            local name=$(basename "$instance")
            
            # Status pr√ºfen - sowohl f√ºr REDAXO als auch Webserver
            if docker ps --format "table {{.Names}}" | grep -q -E "(redaxo-${name}-apache|webserver-${name}-apache)"; then
                echo -e "  ${GREEN}üü¢ $name${NC} (l√§uft)"
                show_instance_info "$name" "    "
            else
                echo -e "  ${RED}üî¥ $name${NC} (gestoppt)"
            fi
            echo ""
        fi
    done
    
    echo -e "${BLUE}üí° Befehle:${NC}"
    echo "   ./redaxo start <name>    - Instanz starten"
    echo "   ./redaxo urls <name>     - URLs anzeigen"
    echo "   ./redaxo db <name>       - DB-Zugangsdaten"
}

show_instance_info() {
    local name=$1
    local prefix=${2:-""}
    
    if [ -f "$INSTANCES_DIR/$name/.env" ]; then
        source "$INSTANCES_DIR/$name/.env"
        echo "${prefix}üåê http://localhost:$HTTP_PORT"
        echo "${prefix}üîí https://localhost:$HTTPS_PORT"
    fi
}

show_urls() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    source "$INSTANCES_DIR/$name/.env"
    
    echo -e "${GREEN}üåê URLs f√ºr '$name'${NC}"
    echo ""
    
    # Pr√ºfe ob es eine Webserver-Instanz ist (keine MariaDB-Variablen)
    if [ -z "$MYSQL_DATABASE" ]; then
        echo -e "${BLUE}Webserver:${NC}"
        echo "  üåê HTTP:  http://localhost:$HTTP_PORT"
        echo "  üîí HTTPS: https://localhost:$HTTPS_PORT"
        echo ""
        
        # Status pr√ºfen f√ºr Webserver
        if docker ps --format "table {{.Names}}" | grep -q "webserver-${name}-apache"; then
            echo -e "${GREEN}‚úÖ Webserver l√§uft - URLs sind erreichbar${NC}"
        else
            echo -e "${RED}‚ö†Ô∏è  Webserver gestoppt${NC}"
            echo -e "${YELLOW}üí° Starten mit: ./redaxo start $name${NC}"
        fi
    else
        echo -e "${BLUE}REDAXO:${NC}"
        echo "  üåê HTTP:  http://localhost:$HTTP_PORT"
        echo "  üîí HTTPS: https://localhost:$HTTPS_PORT"
        echo ""
        echo -e "${BLUE}Tools:${NC}"
        echo "  üóÑÔ∏è  phpMyAdmin: http://localhost:$PHPMYADMIN_PORT"
        echo "  üìß Mailpit:    http://localhost:$MAILPIT_PORT"
        echo ""
        
        # Status pr√ºfen f√ºr REDAXO
        if docker ps --format "table {{.Names}}" | grep -q "redaxo-${name}-apache"; then
            echo -e "${GREEN}‚úÖ Instanz l√§uft - URLs sind erreichbar${NC}"
        else
            echo -e "${RED}‚ö†Ô∏è  Instanz gestoppt${NC}"
            echo -e "${YELLOW}üí° Starten mit: ./redaxo start $name${NC}"
        fi
    fi
}

show_db_config() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    source "$INSTANCES_DIR/$name/.env"
    
    echo -e "${GREEN}üóÑÔ∏è  Datenbank-Zugangsdaten f√ºr '$name'${NC}"
    echo ""
    echo -e "${BLUE}F√ºr REDAXO-Setup:${NC}"
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    echo "‚îÇ üñ•Ô∏è  Server:     mariadb                     ‚îÇ"
    printf "‚îÇ üóÑÔ∏è  Database:   %-23s ‚îÇ\n" "$MYSQL_DATABASE"
    printf "‚îÇ üë§ Username:   %-23s ‚îÇ\n" "$MYSQL_USER"
    printf "‚îÇ üîë Password:   %-23s ‚îÇ\n" "$MYSQL_PASSWORD"
    echo "‚îÇ üîå Port:       3306                        ‚îÇ"
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  Wichtig: Verwenden Sie 'mariadb' als Server, nicht 'localhost'!${NC}"
    echo -e "${BLUE}üí° Diese Daten beim ersten REDAXO-Setup eingeben.${NC}"
}

# === AUTOMATIC REDAXO INSTALLATION ===

auto_install_redaxo() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        return 1
    fi
    
    # Lade Umgebungsvariablen
    source "$INSTANCES_DIR/$name/.env"
    
    echo -e "${BLUE}‚è≥ Warte auf Datenbank-Bereitschaft...${NC}"
    
    # Warte bis MariaDB bereit ist (max. 60 Sekunden)
    local max_attempts=60
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        # Teste Datenbankverbindung √ºber PHP im Apache-Container
        if docker exec "redaxo-${name}-apache" php -r "try { \$pdo = new PDO('mysql:host=mariadb;dbname=$MYSQL_DATABASE', '$MYSQL_USER', '$MYSQL_PASSWORD'); exit(0); } catch(PDOException \$e) { exit(1); }" >/dev/null 2>&1; then
            echo -e "${GREEN}  ‚úÖ Datenbank ist bereit${NC}"
            break
        fi
        
        if [ $attempt -eq $max_attempts ]; then
            echo -e "${RED}  ‚ùå Timeout: Datenbank nicht erreichbar nach ${max_attempts} Sekunden${NC}"
            return 1
        fi
        
        if [ $((attempt % 10)) -eq 0 ]; then
            echo -e "${YELLOW}  ‚è≥ Warte auf Datenbank... (${attempt}/${max_attempts})${NC}"
        fi
        
        sleep 1
        ((attempt++))
    done
    
    echo -e "${BLUE}üóÑÔ∏è F√ºhre automatische REDAXO-Installation aus...${NC}"
    
    # Verwende REDAXO console f√ºr die automatische Installation im quiet mode
    local setup_result
    setup_result=$(docker exec "redaxo-${name}-apache" php /var/www/html/bin/console setup:run \
        --no-interaction \
        --quiet \
        --agree-license \
        --lang=de_de \
        --server="http://localhost:$HTTP_PORT" \
        --servername="REDAXO Auto-Install" \
        --error-email=admin@localhost.local \
        --timezone="Europe/Berlin" \
        --db-host=mariadb \
        --db-login="$MYSQL_USER" \
        --db-password="$MYSQL_PASSWORD" \
        --db-name="$MYSQL_DATABASE" \
        --db-createdb=no \
        --db-setup=normal \
        --db-charset=utf8mb4 \
        --admin-username=admin \
        --admin-password=admin123 2>&1)
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}  ‚úÖ REDAXO automatisch installiert!${NC}"
        echo ""
        echo -e "${GREEN}üéâ Installation erfolgreich abgeschlossen!${NC}"
        echo ""
        echo -e "${BLUE}üìã Login-Daten:${NC}"
        echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
        echo "‚îÇ üë§ Benutzername:  admin                     ‚îÇ"
        echo "‚îÇ üîë Passwort:      admin123                  ‚îÇ"
        echo "‚îÇ üìß E-Mail:        admin@localhost.local     ‚îÇ"
        echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        echo ""
        echo -e "${YELLOW}‚ö†Ô∏è  Wichtig: √Ñndern Sie das Passwort nach dem ersten Login!${NC}"
        echo ""
        echo -e "${BLUE}üåê REDAXO √∂ffnen:${NC}"
        echo "  ‚Ä¢ Frontend: http://localhost:$HTTP_PORT"
        echo "  ‚Ä¢ Backend:  http://localhost:$HTTP_PORT/redaxo/"
        echo ""
    else
        echo -e "${YELLOW}  ‚ö†Ô∏è  Automatische Installation fehlgeschlagen${NC}"
        echo -e "${BLUE}üí° F√ºhren Sie das Setup manuell √ºber das Web-Interface durch${NC}"
        echo -e "${BLUE}üåê Setup-URL: http://localhost:$HTTP_PORT${NC}"
        echo ""
        echo -e "${YELLOW}Debug-Ausgabe:${NC}"
        echo "$setup_result"
    fi
}

# === HELPER FUNCTIONS ===

# Versionspr√ºfung f√ºr PHP
validate_php_version() {
    local version=$1
    local valid_versions=("7.4" "8.0" "8.1" "8.2" "8.3" "8.4")
    
    for valid_version in "${valid_versions[@]}"; do
        if [ "$version" = "$valid_version" ]; then
            return 0
        fi
    done
    return 1
}

# Versionspr√ºfung f√ºr MariaDB
validate_mariadb_version() {
    local version=$1
    local valid_versions=("10.4" "10.5" "10.6" "10.11" "11.0" "latest")
    
    for valid_version in "${valid_versions[@]}"; do
        if [ "$version" = "$valid_version" ]; then
            return 0
        fi
    done
    return 1
}

# Zeige verf√ºgbare Versionen
show_versions() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}üìã Versionen f√ºr Instanz '$name':${NC}"
    echo ""
    
    # Aktuelle Versionen aus docker-compose.yml auslesen
    local compose_file="$INSTANCES_DIR/$name/docker-compose.yml"
    local php_version=$(grep "build: ./docker/apache" "$compose_file" >/dev/null 2>&1 && echo "Custom (siehe Dockerfile)" || grep "image: php:" "$compose_file" | head -1 | sed 's/.*php://' | sed 's/-.*//')
    local mariadb_version=$(grep "image: mariadb:" "$compose_file" | sed 's/.*mariadb://' | head -1)
    
    if [ -z "$php_version" ]; then
        php_version="8.4 (Standard)"
    fi
    if [ -z "$mariadb_version" ]; then
        mariadb_version="latest"
    fi
    
    echo -e "${BLUE}üêò Aktuelle PHP-Version:${NC} $php_version"
    echo -e "${BLUE}üóÑÔ∏è  Aktuelle MariaDB-Version:${NC} $mariadb_version"
    echo ""
    echo -e "${YELLOW}Verf√ºgbare PHP-Versionen:${NC}"
    echo "  7.4, 8.0, 8.1, 8.2, 8.3, 8.4"
    echo ""
    echo -e "${YELLOW}Verf√ºgbare MariaDB-Versionen:${NC}"
    echo "  10.4, 10.5, 10.6, 10.11, 11.0, latest"
    echo ""
    echo -e "${BLUE}Version √§ndern:${NC}"
    echo "  ./redaxo update $name --php-version 8.3"
    echo "  ./redaxo update $name --mariadb-version 10.6"
    echo "  ./redaxo update $name --php-version 8.1 --mariadb-version 11.0"
}

# Aktualisiere Versionen einer Instanz
update_instance_versions() {
    local name=$1
    shift
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    local php_version=""
    local mariadb_version=""
    local rebuild_containers=false
    
    # Parse Argumente
    while [[ $# -gt 0 ]]; do
        case $1 in
            --php-version)
                php_version="$2"
                if ! validate_php_version "$php_version"; then
                    echo -e "${RED}‚ùå Ung√ºltige PHP-Version: $php_version${NC}"
                    echo -e "${YELLOW}Verf√ºgbare Versionen: 7.4, 8.0, 8.1, 8.2, 8.3, 8.4${NC}"
                    exit 1
                fi
                rebuild_containers=true
                shift 2
                ;;
            --mariadb-version)
                mariadb_version="$2"
                if ! validate_mariadb_version "$mariadb_version"; then
                    echo -e "${RED}‚ùå Ung√ºltige MariaDB-Version: $mariadb_version${NC}"
                    echo -e "${YELLOW}Verf√ºgbare Versionen: 10.4, 10.5, 10.6, 10.11, 11.0, latest${NC}"
                    exit 1
                fi
                rebuild_containers=true
                shift 2
                ;;
            *)
                echo -e "${RED}‚ùå Unbekannte Option: $1${NC}"
                exit 1
                ;;
        esac
    done
    
    if [ "$rebuild_containers" = false ]; then
        echo -e "${RED}‚ùå Keine Versions√§nderung angegeben${NC}"
        echo "Verwendung: ./redaxo update $name --php-version <version> [--mariadb-version <version>]"
        exit 1
    fi
    
    echo -e "${GREEN}üîÑ Aktualisiere Instanz '$name'${NC}"
    
    # Instanz stoppen
    echo -e "${YELLOW}  ‚èπ  Stoppe Instanz...${NC}"
    cd "$INSTANCES_DIR/$name"
    docker-compose down >/dev/null 2>&1
    
    # Backup der aktuellen docker-compose.yml
    cp docker-compose.yml "docker-compose.yml.backup.$(date +%Y%m%d_%H%M%S)"
    
    # Neue docker-compose.yml mit aktualisierten Versionen generieren
    local env_file="$INSTANCES_DIR/$name/.env"
    source "$env_file"
    
    # Verwende aktuelle Versionen falls nicht angegeben
    if [ -z "$php_version" ]; then
        php_version=$(grep "image: php:" docker-compose.yml | head -1 | sed 's/.*php://' | sed 's/-.*//' || echo "8.4")
    fi
    if [ -z "$mariadb_version" ]; then
        mariadb_version=$(grep "image: mariadb:" docker-compose.yml | sed 's/.*mariadb://' | head -1 || echo "latest")
    fi
    
    echo -e "${YELLOW}  üêò PHP-Version: $php_version${NC}"
    echo -e "${YELLOW}  üóÑÔ∏è  MariaDB-Version: $mariadb_version${NC}"
    
    # Generiere neue docker-compose.yml mit aktualisierten Versionen
    create_docker_compose_with_versions "$name" "$HTTP_PORT" "$HTTPS_PORT" "$PHPMYADMIN_PORT" "$MAILPIT_PORT" "$php_version" "$mariadb_version"
    
    # Container neu bauen und starten
    echo -e "${YELLOW}  üî® Baue Container neu...${NC}"
    docker-compose build --no-cache >/dev/null 2>&1
    
    echo -e "${YELLOW}  üöÄ Starte Instanz...${NC}"
    docker-compose up -d >/dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}  ‚úÖ Instanz erfolgreich aktualisiert${NC}"
        echo ""
        echo -e "${BLUE}üìã Neue Versionen:${NC}"
        echo -e "  üêò PHP: $php_version"
        echo -e "  üóÑÔ∏è  MariaDB: $mariadb_version"
    else
        echo -e "${RED}  ‚ùå Fehler beim Aktualisieren der Instanz${NC}"
        exit 1
    fi
}

shell_instance() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    # Pr√ºfen ob Instanz l√§uft
    if ! docker ps --format "table {{.Names}}" | grep -q "redaxo-${name}-apache"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Instanz '$name' l√§uft nicht${NC}"
        echo -e "${BLUE}üí° Starte Instanz...${NC}"
        cd "$INSTANCES_DIR/$name"
        docker-compose up -d >/dev/null 2>&1
        
        if [ $? -ne 0 ]; then
            echo -e "${RED}‚ùå Fehler beim Starten der Instanz${NC}"
            exit 1
        fi
        
        echo -e "${GREEN}‚úÖ Instanz gestartet${NC}"
        sleep 2
    fi
    
    echo -e "${GREEN}üêö √ñffne Shell in '$name'...${NC}"
    echo -e "${BLUE}üí° Tipp: 'exit' zum Verlassen der Shell${NC}"
    echo ""
    
    # Shell im Apache-Container √∂ffnen
    docker exec -it "redaxo-${name}-apache" /bin/bash
}

# === BACKUP FUNCTIONS ===

backup_instance() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    # Backup-Ordner f√ºr Instanz erstellen
    local backup_dir="$PROJECT_DIR/backups/$name"
    mkdir -p "$backup_dir"
    
    # Zeitstempel f√ºr Backup
    local timestamp=$(date "+%Y%m%d_%H%M%S")
    local backup_name="${name}_${timestamp}"
    local backup_path="$backup_dir/$backup_name"
    
    echo -e "${YELLOW}üíæ Erstelle Backup f√ºr '$name'...${NC}"
    echo -e "${BLUE}üìÅ Backup-Name: $backup_name${NC}"
    
    # Pr√ºfen ob Instanz l√§uft
    local was_running=false
    if docker ps --format "table {{.Names}}" | grep -q "redaxo-${name}-apache"; then
        was_running=true
    else
        echo -e "${BLUE}üí° Starte Instanz f√ºr Backup...${NC}"
        cd "$INSTANCES_DIR/$name"
        docker-compose up -d >/dev/null 2>&1
        sleep 3
    fi
    
    # Backup-Ordner erstellen
    mkdir -p "$backup_path"
    
    echo -e "${BLUE}  üìÅ Sichere Dateien...${NC}"
    # App-Dateien sichern (ohne var/cache)
    tar -czf "$backup_path/files.tar.gz" -C "$INSTANCES_DIR/$name" \
        --exclude="app/var/cache/*" \
        --exclude="app/var/log/*" \
        app/ docker/ .env 2>/dev/null
    
    # Pr√ºfen ob es eine REDAXO-Instanz ist (hat Datenbank)
    if [ -f "$INSTANCES_DIR/$name/.env" ]; then
        source "$INSTANCES_DIR/$name/.env"
        
        # Nur Datenbank-Backup bei REDAXO-Instanzen
        if [[ "$INSTANCE_TYPE" != "webserver" ]]; then
            echo -e "${BLUE}  üóÑÔ∏è  Sichere Datenbank...${NC}"
            
            # Datenbank-Backup mit verbesserter Fehlerbehandlung
            docker exec "redaxo-${name}-mariadb" mysqldump \
                --single-transaction \
                --routines \
                --triggers \
                -u"$MYSQL_ROOT_USER" -p"$MYSQL_ROOT_PASSWORD" \
                "$MYSQL_DATABASE" > "$backup_path/database.sql" 2>/dev/null
            
            if [ $? -eq 0 ] && [ -s "$backup_path/database.sql" ]; then
                gzip "$backup_path/database.sql"
                echo -e "${GREEN}    ‚úÖ Datenbank gesichert${NC}"
            else
                echo -e "${YELLOW}    ‚ö†Ô∏è  Datenbank-Backup √ºbersprungen (leer oder Fehler)${NC}"
                rm -f "$backup_path/database.sql" 2>/dev/null
            fi
        fi
    fi
    
    # Backup-Info erstellen
    cat > "$backup_path/backup_info.txt" << EOF
Backup Information
==================
Instance: $name
Created: $(date)
EOF

    # Umgebungsvariablen hinzuf√ºgen wenn verf√ºgbar
    if [ -f "$INSTANCES_DIR/$name/.env" ]; then
        echo "Type: $(grep '^INSTANCE_TYPE=' "$INSTANCES_DIR/$name/.env" 2>/dev/null | cut -d'=' -f2)" >> "$backup_path/backup_info.txt"
        echo "PHP Version: $(grep '^PHP_VERSION=' "$INSTANCES_DIR/$name/.env" 2>/dev/null | cut -d'=' -f2)" >> "$backup_path/backup_info.txt"
        echo "MariaDB Version: $(grep '^MARIADB_VERSION=' "$INSTANCES_DIR/$name/.env" 2>/dev/null | cut -d'=' -f2)" >> "$backup_path/backup_info.txt"
    fi

    cat >> "$backup_path/backup_info.txt" << EOF

Files:
- files.tar.gz (App-Dateien, Docker-Config, .env)
$([ -f "$backup_path/database.sql.gz" ] && echo "- database.sql.gz (Datenbank-Dump)")

Restore Command:
./redaxo restore $name $backup_name
EOF
    
    # Instanz wieder stoppen falls sie nicht lief
    if [ "$was_running" = false ]; then
        echo -e "${BLUE}üí° Stoppe Instanz wieder...${NC}"
        cd "$INSTANCES_DIR/$name"
        docker-compose down >/dev/null 2>&1
    fi
    
    # Backup-Gr√∂√üe ermitteln
    local backup_size=$(du -sh "$backup_path" | cut -f1)
    
    echo -e "${GREEN}‚úÖ Backup erfolgreich erstellt!${NC}"
    echo -e "${BLUE}üìÅ Pfad: backups/$name/$backup_name${NC}"
    echo -e "${BLUE}üì¶ Gr√∂√üe: $backup_size${NC}"
    echo ""
    echo -e "${YELLOW}üí° Wiederherstellen mit:${NC}"
    echo -e "   ./redaxo restore $name $backup_name"
}

restore_instance() {
    local name=$1
    local backup_name=$2
    
    if [ -z "$name" ] || [ -z "$backup_name" ]; then
        echo -e "${RED}‚ùå Instanzname und Backup-Name erforderlich${NC}"
        echo -e "${BLUE}Verwendung: ./redaxo restore <instance> <backup>${NC}"
        exit 1
    fi
    
    local backup_path="$PROJECT_DIR/backups/$name/$backup_name"
    
    if [ ! -d "$backup_path" ]; then
        echo -e "${RED}‚ùå Backup '$backup_name' f√ºr Instanz '$name' nicht gefunden${NC}"
        echo -e "${BLUE}üí° Verf√ºgbare Backups anzeigen: ./redaxo backups${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Ziel-Instanz '$name' existiert nicht${NC}"
        echo -e "${BLUE}üí° Erstelle zuerst eine Instanz: ./redaxo create $name${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}üîÑ Stelle Backup wieder her...${NC}"
    echo -e "${BLUE}üìÅ Backup: $backup_name${NC}"
    echo -e "${RED}‚ö†Ô∏è  WARNUNG: Aktuelle Daten werden √ºberschrieben!${NC}"
    echo ""
    read -p "Fortfahren? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}Abgebrochen${NC}"
        exit 0
    fi
    
    # Instanz stoppen
    echo -e "${BLUE}‚èπÔ∏è  Stoppe Instanz...${NC}"
    cd "$INSTANCES_DIR/$name"
    docker-compose down >/dev/null 2>&1
    
    # Backup-Info anzeigen
    if [ -f "$backup_path/backup_info.txt" ]; then
        echo -e "${BLUE}üìã Backup-Info:${NC}"
        grep -E "(Created|Type|PHP|MariaDB)" "$backup_path/backup_info.txt" | sed 's/^/   /'
        echo ""
    fi
    
    # Dateien wiederherstellen
    echo -e "${BLUE}  üìÅ Stelle Dateien wieder her...${NC}"
    if [ -f "$backup_path/files.tar.gz" ]; then
        # Aktuelles app-Verzeichnis sichern
        if [ -d "$INSTANCES_DIR/$name/app" ]; then
            mv "$INSTANCES_DIR/$name/app" "$INSTANCES_DIR/$name/app.backup.$(date +%Y%m%d_%H%M%S)"
        fi
        
        # Backup extrahieren
        tar -xzf "$backup_path/files.tar.gz" -C "$INSTANCES_DIR/$name" 2>/dev/null
        echo -e "${GREEN}    ‚úÖ Dateien wiederhergestellt${NC}"
    else
        echo -e "${RED}    ‚ùå Datei-Backup nicht gefunden${NC}"
    fi
    
    # Datenbank wiederherstellen
    if [ -f "$backup_path/database.sql.gz" ]; then
        echo -e "${BLUE}  üóÑÔ∏è  Stelle Datenbank wieder her...${NC}"
        
        # Instanz starten f√ºr DB-Restore
        docker-compose up -d >/dev/null 2>&1
        sleep 5
        
        # Datenbank-Restore
        source "$INSTANCES_DIR/$name/.env"
        gunzip -c "$backup_path/database.sql.gz" | \
            docker exec -i "redaxo-${name}-mariadb" mysql \
            -u"$MYSQL_ROOT_USER" -p"$MYSQL_ROOT_PASSWORD" \
            "$MYSQL_DATABASE" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}    ‚úÖ Datenbank wiederhergestellt${NC}"
        else
            echo -e "${RED}    ‚ùå Datenbank-Restore fehlgeschlagen${NC}"
        fi
    fi
    
    # Instanz neu starten
    echo -e "${BLUE}üîÑ Starte Instanz neu...${NC}"
    docker-compose restart >/dev/null 2>&1
    
    echo -e "${GREEN}‚úÖ Backup erfolgreich wiederhergestellt!${NC}"
    echo ""
    show_urls "$name"
}

list_backups() {
    local backups_dir="$PROJECT_DIR/backups"
    
    if [ ! -d "$backups_dir" ] || [ -z "$(ls -A "$backups_dir" 2>/dev/null)" ]; then
        echo -e "${YELLOW}üì¶ Keine Backups vorhanden${NC}"
        echo ""
        echo -e "${BLUE}üí° Backup erstellen: ./redaxo backup <instance>${NC}"
        return
    fi
    
    echo -e "${GREEN}üì¶ Verf√ºgbare Backups${NC}"
    echo ""
    
    for instance_dir in "$backups_dir"/*; do
        if [ -d "$instance_dir" ]; then
            local instance=$(basename "$instance_dir")
            echo -e "${BLUE}üèóÔ∏è  $instance${NC}"
            
            for backup_dir in "$instance_dir"/*; do
                if [ -d "$backup_dir" ]; then
                    local backup=$(basename "$backup_dir")
                    local backup_size=$(du -sh "$backup_dir" 2>/dev/null | cut -f1)
                    
                    echo -e "    üìÅ ${YELLOW}$backup${NC} (${backup_size})"
                    
                    # Backup-Inhalt anzeigen
                    local files=""
                    [ -f "$backup_dir/files.tar.gz" ] && files="${files}üìÅFiles "
                    [ -f "$backup_dir/database.sql.gz" ] && files="${files}üóÑÔ∏èDB "
                    
                    if [ -n "$files" ]; then
                        echo -e "       üì¶ $files"
                    fi
                    echo ""
                fi
            done
        fi
    done
    
    echo -e "${BLUE}üí° Befehle:${NC}"
    echo "   ./redaxo backup <instance>           - Neues Backup erstellen"
    echo "   ./redaxo restore <instance> <backup> - Backup wiederherstellen"
}

# === CLEANUP FUNCTIONS ===

cleanup_docker() {
    echo -e "${YELLOW}üßπ Docker-System bereinigen...${NC}"
    echo ""
    
    echo -e "${BLUE}üìä Aktuelle Docker-Nutzung:${NC}"
    docker system df
    echo ""
    
    echo -e "${YELLOW}‚ö†Ô∏è  Diese Bereinigung entfernt:${NC}"
    echo "  ‚Ä¢ Verwaiste Container (orphaned containers)"
    echo "  ‚Ä¢ Ungenutzte Netzwerke (unused networks)"
    echo "  ‚Ä¢ Verwaiste Images (dangling images)"
    echo "  ‚Ä¢ Build-Cache (build cache)"
    echo ""
    echo -e "${RED}‚ö†Ô∏è  REDAXO-Instanzen werden NICHT betroffen!${NC}"
    echo ""
    
    read -p "Bereinigung durchf√ºhren? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}‚è≠Ô∏è  Bereinigung abgebrochen${NC}"
        return
    fi
    
    echo -e "${BLUE}üóëÔ∏è  Entferne verwaiste Container und Netzwerke...${NC}"
    docker system prune -f
    echo ""
    
    echo -e "${BLUE}üóëÔ∏è  Entferne verwaiste Volumes...${NC}"
    docker volume prune -f
    echo ""
    
    echo -e "${GREEN}‚úÖ Docker-Bereinigung abgeschlossen!${NC}"
    echo ""
    
    echo -e "${BLUE}üìä Neue Docker-Nutzung:${NC}"
    docker system df
    echo ""
    
    echo -e "${BLUE}üí° Ihre REDAXO-Instanzen sind weiterhin verf√ºgbar:${NC}"
    list_instances
}

# === MAIN LOGIC ===

case ${1:-help} in
    create)
        shift
        create_instance "$@"
        ;;
    start)
        start_instance "$2"
        ;;
    stop)
        stop_instance "$2"
        ;;
    remove|delete)
        remove_instance "$2"
        ;;
    list|ls)
        list_instances
        ;;
    urls)
        show_urls "$2"
        ;;
    db|database)
        show_db_config "$2"
        ;;
    ssl-setup|ssl)
        setup_ssl
        ;;
    versions|version)
        show_versions "$2"
        ;;
    update)
        shift
        update_instance_versions "$@"
        ;;
    shell)
        shell_instance "$2"
        ;;
    backup)
        backup_instance "$2"
        ;;
    restore)
        restore_instance "$2" "$3"
        ;;
    backups)
        list_backups
        ;;
    cleanup)
        cleanup_docker
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå Unbekannter Befehl: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
