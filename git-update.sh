#!/bin/bash

# REDAXO Multi-Instance Manager - Git Update
# Aktualisiert √ºber Git (f√ºr Entwickler/Git-Benutzer)
# Repository: https://github.com/skerbis/redaxo-multi-instances

# Farben
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${BLUE}üîÑ Git-Update f√ºr REDAXO Multi-Instance Manager${NC}"
echo ""

PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Pr√ºfe ob Git-Repository vorhanden ist
if [ ! -d "$PROJECT_DIR/.git" ]; then
    echo -e "${RED}‚ùå Dies ist kein Git-Repository${NC}"
    echo -e "${YELLOW}üí° Verwenden Sie './update-manager.sh' f√ºr Downloads ohne Git${NC}"
    echo ""
    echo -e "${CYAN}Oder initialisieren Sie Git:${NC}"
    echo "git init"
    echo "git remote add origin https://github.com/skerbis/redaxo-multi-instances.git"
    echo "git fetch"
    echo "git reset --hard origin/main"
    exit 1
fi

# Pr√ºfe Git-Status
echo -e "${BLUE}üìã Git-Status wird gepr√ºft...${NC}"

# Uncommitted changes pr√ºfen
if ! git diff-index --quiet HEAD --; then
    echo -e "${YELLOW}‚ö†Ô∏è  Sie haben uncommitted changes!${NC}"
    echo ""
    echo -e "${CYAN}Ge√§nderte Dateien:${NC}"
    git status --porcelain
    echo ""
    echo -e "${YELLOW}M√∂chten Sie Ihre √Ñnderungen stashen? (y/n):${NC}"
    read -p "> " stash_changes
    
    if [ "$stash_changes" = "y" ] || [ "$stash_changes" = "Y" ]; then
        git stash push -m "Auto-stash vor Update $(date)"
        echo -e "${GREEN}‚úÖ √Ñnderungen gestasht${NC}"
        STASHED=true
    else
        echo -e "${RED}‚ùå Update abgebrochen - committen Sie Ihre √Ñnderungen zuerst${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}‚úÖ Arbeitsverzeichnis ist sauber${NC}"
    STASHED=false
fi

# Remote-Informationen
echo -e "${BLUE}üåê Remote-Repository wird gepr√ºft...${NC}"
git fetch --quiet

# Commits behind pr√ºfen
commits_behind=$(git rev-list HEAD..origin/main --count 2>/dev/null || echo "0")

if [ "$commits_behind" -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Repository ist bereits aktuell${NC}"
    
    if [ "$STASHED" = true ]; then
        echo -e "${YELLOW}üí° M√∂chten Sie Ihre gestashten √Ñnderungen wiederherstellen? (y/n):${NC}"
        read -p "> " restore_stash
        if [ "$restore_stash" = "y" ] || [ "$restore_stash" = "Y" ]; then
            git stash pop
            echo -e "${GREEN}‚úÖ Stash wiederhergestellt${NC}"
        fi
    fi
    
    exit 0
fi

echo -e "${YELLOW}üì• $commits_behind neue Commits verf√ºgbar${NC}"

# Zeige verf√ºgbare Updates
echo -e "${CYAN}üìã Neue Commits:${NC}"
git log --oneline HEAD..origin/main | head -5

echo ""
echo -e "${YELLOW}M√∂chten Sie das Update durchf√ºhren? (y/n):${NC}"
read -p "> " do_update

if [ "$do_update" != "y" ] && [ "$do_update" != "Y" ]; then
    echo -e "${YELLOW}Update abgebrochen${NC}"
    
    if [ "$STASHED" = true ]; then
        git stash pop
        echo -e "${GREEN}‚úÖ Stash wiederhergestellt${NC}"
    fi
    
    exit 0
fi

# Backup erstellen
echo -e "${BLUE}üíæ Backup wird erstellt...${NC}"
backup_dir="$PROJECT_DIR/backup-git-$(date +%Y%m%d_%H%M%S)"
mkdir -p "$backup_dir"

# Wichtige Konfigurationsdateien sichern
if [ -f "dashboard/.env" ]; then
    cp "dashboard/.env" "$backup_dir/"
fi
if [ -d "ssl" ]; then
    cp -r "ssl" "$backup_dir/" 2>/dev/null || true
fi
if [ -d "instances" ]; then
    find instances -name "docker-compose.yml" -exec cp --parents {} "$backup_dir/" \; 2>/dev/null || true
fi

echo -e "${GREEN}‚úÖ Backup erstellt in: $backup_dir${NC}"

# Git Pull durchf√ºhren
echo -e "${BLUE}üîÑ Git Pull wird durchgef√ºhrt...${NC}"

if git pull origin main; then
    echo -e "${GREEN}‚úÖ Repository erfolgreich aktualisiert${NC}"
    
    # Berechtigungen setzen
    echo -e "${BLUE}üîê Berechtigungen werden gesetzt...${NC}"
    chmod +x redaxo manager setup.sh maintenance.sh diagnose.sh status.sh import-dump redaxo-downloader.sh dashboard-start 2>/dev/null || true
    if [ -f "dashboard/dashboard-start" ]; then
        chmod +x dashboard/dashboard-start
    fi
    
    # Dashboard-Dependencies pr√ºfen
    if [ -f "dashboard/package.json" ]; then
        echo -e "${BLUE}üì¶ Dashboard-Dependencies werden gepr√ºft...${NC}"
        cd dashboard
        npm install --silent
        cd ..
        echo -e "${GREEN}‚úÖ Dashboard-Dependencies aktualisiert${NC}"
    fi
    
    echo ""
    echo -e "${GREEN}üéâ Git-Update erfolgreich abgeschlossen!${NC}"
    echo ""
    echo -e "${CYAN}üìä Was wurde aktualisiert:${NC}"
    echo -e "   ‚Ä¢ $commits_behind neue Commits eingespielt"
    echo -e "   ‚Ä¢ Berechtigungen gesetzt"
    echo -e "   ‚Ä¢ Dashboard-Dependencies aktualisiert"
    echo ""
    echo -e "${CYAN}üöÄ Empfohlene n√§chste Schritte:${NC}"
    echo -e "   ‚Ä¢ Dashboard starten: ${YELLOW}./dashboard-start${NC}"
    echo -e "   ‚Ä¢ System-Status pr√ºfen: ${YELLOW}./status.sh${NC}"
    echo ""
    echo -e "${BLUE}üíæ Backup verf√ºgbar in: ${YELLOW}$backup_dir${NC}"
    
    # Stash wiederherstellen
    if [ "$STASHED" = true ]; then
        echo ""
        echo -e "${YELLOW}üí° Sie haben gestashte √Ñnderungen. M√∂chten Sie diese wiederherstellen? (y/n):${NC}"
        read -p "> " restore_stash
        if [ "$restore_stash" = "y" ] || [ "$restore_stash" = "Y" ]; then
            if git stash pop; then
                echo -e "${GREEN}‚úÖ Stash erfolgreich wiederhergestellt${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  Merge-Konflikte beim Stash-Restore${NC}"
                echo -e "${CYAN}L√∂sen Sie die Konflikte manuell mit: git status${NC}"
            fi
        fi
    fi
    
else
    echo -e "${RED}‚ùå Git Pull fehlgeschlagen${NC}"
    
    if [ "$STASHED" = true ]; then
        git stash pop
        echo -e "${GREEN}‚úÖ Stash wiederhergestellt${NC}"
    fi
    
    exit 1
fi
