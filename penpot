#!/bin/bash

# Penpot Multi-Instance Manager
# Ein Skript f√ºr Penpot Design-Tool Instanzen

# Farben
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Konfiguration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
PROJECT_DIR="$SCRIPT_DIR"
PENPOT_DIR="$PROJECT_DIR/penpot-instances"
SSL_DIR="$PROJECT_DIR/ssl"
BACKUPS_DIR="$PROJECT_DIR/penpot-backups"

# === HELPER FUNCTIONS ===

show_help() {
    echo -e "${GREEN}üé® Penpot Multi-Instance Manager${NC}"
    echo ""
    echo -e "${BLUE}Verwendung:${NC}"
    echo "  ./penpot <command> [options]"
    echo ""
    echo -e "${BLUE}Commands:${NC}"
    echo "  ${YELLOW}create <name>${NC}     - Neue Penpot-Instanz erstellen"
    echo "  ${YELLOW}start <name>${NC}      - Instanz starten"
    echo "  ${YELLOW}stop <name>${NC}       - Instanz stoppen"
    echo "  ${YELLOW}remove <name>${NC}     - Instanz l√∂schen"
    echo "  ${YELLOW}remove all${NC}        - Alle Instanzen l√∂schen"
    echo "  ${YELLOW}list${NC}              - Alle Instanzen anzeigen"
    echo "  ${YELLOW}urls <name>${NC}       - URLs einer Instanz anzeigen"
    echo "  ${YELLOW}shell <name>${NC}      - Shell in Container √∂ffnen"
    echo "  ${YELLOW}logs <name>${NC}       - Container-Logs anzeigen"
    echo "  ${YELLOW}backup <name>${NC}     - Backup erstellen"
    echo "  ${YELLOW}restore <name> <backup>${NC} - Backup wiederherstellen"
    echo "  ${YELLOW}backups${NC}           - Alle Backups anzeigen"
    echo "  ${YELLOW}repair <name>${NC}     - Docker-Probleme beheben"
    echo "  ${YELLOW}cleanup${NC}           - Docker-System bereinigen"
    echo "  ${YELLOW}ssl-setup${NC}         - SSL-Zertifikate einrichten"
    echo ""
    echo -e "${BLUE}ü§ñ AI Copilot:${NC}"
    echo "  ${YELLOW}copilot start${NC}     - Penpot Copilot (AI-Assistent) starten"
    echo "  ${YELLOW}copilot stop${NC}      - Penpot Copilot stoppen"
    echo "  ${YELLOW}copilot status${NC}    - Copilot-Status anzeigen"
    echo "  ${YELLOW}copilot logs${NC}      - Copilot-Logs anzeigen"
    echo "  ${YELLOW}copilot install${NC}   - Copilot in Penpot-Instanz installieren"
    echo ""
    echo -e "${BLUE}Beispiele:${NC}"
    echo "  ./penpot create design-team"
    echo "  ./penpot create kunde-a --port 9090"
    echo "  ./penpot start design-team"
    echo "  ./penpot urls design-team"
    echo "  ./penpot backup design-team"
    echo "  ./penpot copilot start"
    echo "  ./penpot copilot install design-team"
    echo ""
    echo -e "${YELLOW}üí° Tipp: Penpot l√§uft standardm√§√üig auf Port 9090 + SSL${NC}"
    echo -e "${BLUE}üé® Penpot ist ein Open-Source Design & Prototyping Tool${NC}"
}

instance_exists() {
    [ -d "$PENPOT_DIR/$1" ]
}

find_available_port() {
    local start_port=$1
    local port=$start_port
    
    while [ $port -lt 65535 ]; do
        if ! lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            echo $port
            return
        fi
        ((port++))
    done
    
    echo "Fehler: Kein verf√ºgbarer Port gefunden" >&2
    exit 1
}

# === SSL FUNCTIONS ===

setup_ssl() {
    echo -e "${GREEN}üîí SSL-Setup f√ºr Penpot${NC}"
    echo ""
    
    # Pr√ºfe ob mkcert installiert ist
    if ! command -v mkcert &> /dev/null; then
        echo -e "${YELLOW}üì¶ Installiere mkcert...${NC}"
        if command -v brew &> /dev/null; then
            brew install mkcert
        else
            echo -e "${RED}‚ùå Fehler: Homebrew nicht gefunden${NC}"
            echo -e "${YELLOW}Installieren Sie mkcert manuell: https://github.com/FiloSottile/mkcert${NC}"
            exit 1
        fi
    fi
    
    # Installiere lokale CA
    echo -e "${YELLOW}üîß Installiere lokale Certificate Authority...${NC}"
    mkcert -install
    
    echo -e "${GREEN}‚úÖ SSL-Setup abgeschlossen${NC}"
    echo -e "${BLUE}üí° Verwenden Sie jetzt 'create' um Penpot-Instanzen zu erstellen${NC}"
}

generate_ssl_cert() {
    local name=$1
    local ssl_instance_dir="$SSL_DIR/$name"
    
    mkdir -p "$ssl_instance_dir"
    
    echo -e "${YELLOW}üîí Generiere SSL-Zertifikat f√ºr '$name'...${NC}"
    
    cd "$ssl_instance_dir"
    if mkcert -cert-file cert.crt -key-file private.key localhost 127.0.0.1 ::1; then
        echo -e "${GREEN}  ‚úÖ SSL-Zertifikat erstellt${NC}"
    else
        echo -e "${RED}  ‚ùå Fehler beim Erstellen des SSL-Zertifikats${NC}"
    fi
}

# === PENPOT INSTANCE FUNCTIONS ===

create_instance() {
    local name=$1
    shift
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Fehler: Instanzname erforderlich${NC}"
        echo "Verwendung: ./penpot create <name> [--port <port>]"
        exit 1
    fi
    
    if instance_exists "$name"; then
        echo -e "${RED}‚ùå Fehler: Penpot-Instanz '$name' existiert bereits${NC}"
        exit 1
    fi
    
    # Standard-Ports
    local custom_port=""
    
    # Parse Argumente
    while [[ $# -gt 0 ]]; do
        case $1 in
            --port)
                custom_port="$2"
                shift 2
                ;;
            *)
                echo -e "${RED}‚ùå Unbekannte Option: $1${NC}"
                exit 1
                ;;
        esac
    done
    
    echo -e "${GREEN}üé® Erstelle Penpot-Instanz '$name'${NC}"
    
    # Finde verf√ºgbare Ports
    if [ -n "$custom_port" ]; then
        http_port="$custom_port"
    else
        http_port=$(find_available_port 9090)
    fi
    
    https_port=$(find_available_port $((http_port + 360)))
    
    echo ""
    echo -e "${BLUE}üìã Konfiguration:${NC}"
    echo "  ‚Ä¢ Name:       $name"
    echo "  ‚Ä¢ HTTP:       localhost:$http_port"
    echo "  ‚Ä¢ HTTPS:      localhost:$https_port"
    echo ""
    
    local instance_dir="$PENPOT_DIR/$name"
    mkdir -p "$instance_dir"
    
    # SSL-Zertifikat generieren
    generate_ssl_cert "$name"
    
    # Erstelle docker-compose.yml
    create_docker_compose "$name" "$http_port" "$https_port"
    
    # Erstelle .env-Datei
    create_env_file "$name" "$http_port" "$https_port"
    
    echo -e "${GREEN}‚úÖ Penpot-Instanz '$name' erfolgreich erstellt${NC}"
    echo ""
    
    # Starte Instanz automatisch
    echo -e "${YELLOW}üîÑ Starte Instanz...${NC}"
    start_instance "$name"
}

create_docker_compose() {
    local name=$1
    local http_port=$2
    local https_port=$3
    
    cat > "$PENPOT_DIR/$name/docker-compose.yml" << EOF
services:
  penpot-frontend:
    image: "penpotapp/frontend:latest"
    container_name: penpot-${name}-frontend
    restart: always
    ports:
      - "${http_port}:8080"
      - "${https_port}:443"
    volumes:
      - penpot_assets:/opt/data/assets
      - ../../ssl/${name}/cert.crt:/etc/ssl/certs/cert.crt:ro
      - ../../ssl/${name}/private.key:/etc/ssl/private/private.key:ro
    depends_on:
      - penpot-backend
      - penpot-exporter
    networks:
      - penpot-network
    environment:
      - PENPOT_FLAGS=\${PENPOT_FLAGS}

  penpot-backend:
    image: "penpotapp/backend:latest"
    container_name: penpot-${name}-backend
    restart: always
    volumes:
      - penpot_assets:/opt/data/assets
    depends_on:
      - penpot-postgres
      - penpot-redis
    networks:
      - penpot-network
    environment:
      - PENPOT_FLAGS=\${PENPOT_FLAGS}
      - PENPOT_SECRET_KEY=\${PENPOT_SECRET_KEY}
      - PENPOT_DATABASE_URI=\${PENPOT_DATABASE_URI}
      - PENPOT_DATABASE_USERNAME=\${PENPOT_DATABASE_USERNAME}
      - PENPOT_DATABASE_PASSWORD=\${PENPOT_DATABASE_PASSWORD}
      - PENPOT_REDIS_URI=\${PENPOT_REDIS_URI}
      - PENPOT_ASSETS_STORAGE_BACKEND=\${PENPOT_ASSETS_STORAGE_BACKEND}
      - PENPOT_STORAGE_ASSETS_FS_DIRECTORY=\${PENPOT_STORAGE_ASSETS_FS_DIRECTORY}
      - PENPOT_TELEMETRY_ENABLED=\${PENPOT_TELEMETRY_ENABLED}
      - PENPOT_SMTP_ENABLED=\${PENPOT_SMTP_ENABLED}

  penpot-exporter:
    image: "penpotapp/exporter:latest"
    container_name: penpot-${name}-exporter
    restart: always
    networks:
      - penpot-network
    environment:
      - PENPOT_PUBLIC_URI=\${PENPOT_PUBLIC_URI}
      - PENPOT_REDIS_URI=\${PENPOT_REDIS_URI}

  penpot-postgres:
    image: "postgres:15"
    container_name: penpot-${name}-postgres
    restart: always
    stop_signal: SIGINT
    volumes:
      - penpot_postgres:/var/lib/postgresql/data
    networks:
      - penpot-network
    environment:
      - POSTGRES_INITDB_ARGS=\${POSTGRES_INITDB_ARGS}
      - POSTGRES_DB=\${POSTGRES_DB}
      - POSTGRES_USER=\${POSTGRES_USER}
      - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}

  penpot-redis:
    image: redis:7
    container_name: penpot-${name}-redis
    restart: always
    networks:
      - penpot-network

volumes:
  penpot_postgres:
  penpot_assets:

networks:
  penpot-network:
EOF
}

create_env_file() {
    local name=$1
    local http_port=$2
    local https_port=$3
    
    # Generiere zuf√§llige Werte
    local secret_key=$(openssl rand -hex 32)
    local postgres_password=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
    
    cat > "$PENPOT_DIR/$name/.env" << EOF
# Penpot Instance: $name
INSTANCE_NAME=$name

# Ports
HTTP_PORT=$http_port
HTTPS_PORT=$https_port

# Penpot Configuration
PENPOT_FLAGS="enable-registration enable-login-with-ldap disable-email-verification disable-smtp"
PENPOT_SECRET_KEY=$secret_key
PENPOT_PUBLIC_URI=http://localhost:$http_port

# Email Configuration (disabled for local development)
PENPOT_SMTP_ENABLED=false

# Database
PENPOT_DATABASE_URI=postgresql://penpot-postgres/penpot
PENPOT_DATABASE_USERNAME=penpot
PENPOT_DATABASE_PASSWORD=$postgres_password

# Redis
PENPOT_REDIS_URI=redis://penpot-redis/0

# Storage
PENPOT_ASSETS_STORAGE_BACKEND=assets-fs
PENPOT_STORAGE_ASSETS_FS_DIRECTORY=/opt/data/assets

# Privacy
PENPOT_TELEMETRY_ENABLED=false

# PostgreSQL
POSTGRES_INITDB_ARGS=--data-checksums
POSTGRES_DB=penpot
POSTGRES_USER=penpot
POSTGRES_PASSWORD=$postgres_password
EOF
}

start_instance() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Penpot-Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}üîÑ Starte Penpot-Instanz '$name'...${NC}"
    
    cd "$PENPOT_DIR/$name"
    docker-compose up -d >/dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ '$name' gestartet${NC}"
        echo ""
        
        # Warte kurz und zeige URLs
        sleep 3
        show_urls "$name"
        
        echo ""
        echo -e "${BLUE}‚è≥ Penpot startet im Hintergrund...${NC}"
        echo -e "${YELLOW}üí° Erste Anmeldung kann 1-2 Minuten dauern${NC}"
    else
        echo -e "${RED}‚ùå Fehler beim Starten${NC}"
        exit 1
    fi
}

stop_instance() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Penpot-Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}‚èπÔ∏è  Stoppe Penpot-Instanz '$name'...${NC}"
    
    cd "$PENPOT_DIR/$name"
    docker-compose down >/dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ '$name' gestoppt${NC}"
    else
        echo -e "${RED}‚ùå Fehler beim Stoppen${NC}"
        exit 1
    fi
}

show_urls() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Penpot-Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    source "$PENPOT_DIR/$name/.env"
    
    echo -e "${GREEN}üé® URLs f√ºr Penpot-Instanz '$name'${NC}"
    echo ""
    echo -e "${BLUE}Penpot:${NC}"
    echo "  üé® HTTP:  http://localhost:$HTTP_PORT"
    echo "  üîí HTTPS: https://localhost:$HTTPS_PORT"
    echo ""
    
    # Status pr√ºfen
    if docker ps --format "table {{.Names}}" | grep -q "penpot-${name}-frontend"; then
        echo -e "${GREEN}‚úÖ Instanz l√§uft - URLs sind erreichbar${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è  Instanz gestoppt${NC}"
        echo -e "${YELLOW}üí° Starten mit: ./penpot start $name${NC}"
    fi
}

list_instances() {
    echo -e "${GREEN}üé® Alle Penpot-Instanzen${NC}"
    echo ""
    
    if [ ! -d "$PENPOT_DIR" ] || [ -z "$(ls -A "$PENPOT_DIR" 2>/dev/null)" ]; then
        echo -e "${YELLOW}üì≠ Keine Penpot-Instanzen gefunden${NC}"
        echo ""
        echo -e "${BLUE}üí° Erstellen Sie eine neue Instanz mit:${NC}"
        echo "   ./penpot create design-team"
        return
    fi
    
    for instance in "$PENPOT_DIR"/*; do
        if [ -d "$instance" ]; then
            local name=$(basename "$instance")
            
            # Status pr√ºfen
            if docker ps --format "table {{.Names}}" | grep -q "penpot-${name}-frontend"; then
                echo -e "  ${GREEN}üü¢ $name${NC} (l√§uft)"
                show_instance_info "$name" "    "
            else
                echo -e "  ${YELLOW}üî¥ $name${NC} (gestoppt)"
                show_instance_info "$name" "    "
            fi
            echo ""
        fi
    done
}

show_instance_info() {
    local name=$1
    local prefix=$2
    
    if [ -f "$PENPOT_DIR/$name/.env" ]; then
        source "$PENPOT_DIR/$name/.env"
        echo "${prefix}üåê http://localhost:$HTTP_PORT"
        echo "${prefix}üîí https://localhost:$HTTPS_PORT"
    fi
}

remove_instance() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        echo "Verwendung: ./penpot remove <name> oder ./penpot remove all"
        exit 1
    fi
    
    # Spezialbehandlung f√ºr "all"
    if [ "$name" = "all" ]; then
        remove_all_instances
        return
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Penpot-Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}‚ö†Ô∏è  Penpot-Instanz '$name' wirklich l√∂schen? (y/N)${NC}"
    read -r confirmation
    
    if [[ $confirmation =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}üóëÔ∏è  L√∂sche '$name'...${NC}"
        
        # Stoppe Instanz
        cd "$PENPOT_DIR/$name"
        docker-compose down -v >/dev/null 2>&1
        
        # L√∂sche Dateien
        rm -rf "$PENPOT_DIR/$name"
        rm -rf "$SSL_DIR/$name"
        
        # L√∂sche auch Backups der Instanz
        if [ -d "$BACKUPS_DIR/$name" ]; then
            echo -e "${YELLOW}  üóëÔ∏è  L√∂sche Backups...${NC}"
            rm -rf "$BACKUPS_DIR/$name"
        fi
        
        echo -e "${GREEN}‚úÖ '$name' gel√∂scht${NC}"
    else
        echo -e "${YELLOW}‚ùå Abgebrochen${NC}"
    fi
}

remove_all_instances() {
    if [ ! -d "$PENPOT_DIR" ] || [ -z "$(ls -A "$PENPOT_DIR" 2>/dev/null)" ]; then
        echo -e "${YELLOW}üì≠ Keine Penpot-Instanzen zum L√∂schen gefunden${NC}"
        return
    fi
    
    echo -e "${RED}‚ö†Ô∏è  WARNUNG: Alle Penpot-Instanzen werden gel√∂scht!${NC}"
    echo ""
    echo -e "${BLUE}üìã Gefundene Instanzen:${NC}"
    
    local instance_count=0
    for instance in "$PENPOT_DIR"/*; do
        if [ -d "$instance" ]; then
            local name=$(basename "$instance")
            echo "  ‚Ä¢ $name"
            ((instance_count++))
        fi
    done
    
    echo ""
    echo -e "${RED}‚ö†Ô∏è  Diese Aktion kann NICHT r√ºckg√§ngig gemacht werden!${NC}"
    echo -e "${YELLOW}Alle Daten, Container, Volumes und SSL-Zertifikate werden entfernt.${NC}"
    echo ""
    echo -e "${YELLOW}Zum Best√§tigen tippen Sie 'DELETE ALL': ${NC}"
    read -r confirmation
    
    if [ "$confirmation" = "DELETE ALL" ]; then
        echo -e "${YELLOW}üóëÔ∏è  L√∂sche alle $instance_count Penpot-Instanzen...${NC}"
        echo ""
        
        for instance in "$PENPOT_DIR"/*; do
            if [ -d "$instance" ]; then
                local name=$(basename "$instance")
                echo -e "${BLUE}  üóëÔ∏è  L√∂sche '$name'...${NC}"
                
                # Stoppe Container falls sie laufen
                cd "$instance"
                docker-compose down -v >/dev/null 2>&1
                
                # L√∂sche Instanz-Dateien
                rm -rf "$instance"
                
                # L√∂sche SSL-Zertifikate
                if [ -d "$SSL_DIR/$name" ]; then
                    rm -rf "$SSL_DIR/$name"
                fi
                
                # L√∂sche Backups
                if [ -d "$BACKUPS_DIR/$name" ]; then
                    rm -rf "$BACKUPS_DIR/$name"
                fi
            fi
        done
        
        # Zus√§tzliche Docker-Bereinigung
        echo -e "${BLUE}  üßπ Bereinige Docker-Ressourcen...${NC}"
        docker system prune -f >/dev/null 2>&1
        docker volume prune -f >/dev/null 2>&1
        
        echo -e "${GREEN}‚úÖ Alle Penpot-Instanzen erfolgreich gel√∂scht${NC}"
        echo -e "${BLUE}üí° Erstellen Sie neue Instanzen mit: ./penpot create <name>${NC}"
    else
        echo -e "${YELLOW}‚ùå Abgebrochen - Eingabe war nicht 'DELETE ALL'${NC}"
    fi
}

shell_instance() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Penpot-Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    # Pr√ºfen ob Instanz l√§uft
    if ! docker ps --format "table {{.Names}}" | grep -q "penpot-${name}-backend"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Penpot-Instanz '$name' l√§uft nicht${NC}"
        echo -e "${BLUE}üí° Starte Instanz...${NC}"
        
        cd "$PENPOT_DIR/$name"
        docker-compose up -d >/dev/null 2>&1
        
        if [ $? -ne 0 ]; then
            echo -e "${RED}‚ùå Fehler beim Starten der Instanz${NC}"
            exit 1
        fi
        
        echo -e "${GREEN}‚úÖ Instanz gestartet${NC}"
        sleep 2
    fi
    
    echo -e "${GREEN}üêö √ñffne Shell in Penpot-Backend '$name'...${NC}"
    echo -e "${BLUE}üí° Tipp: 'exit' zum Verlassen der Shell${NC}"
    echo ""
    
    # Shell im Backend-Container √∂ffnen
    docker exec -it "penpot-${name}-backend" /bin/bash
}

show_logs() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Penpot-Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}üìã Logs f√ºr Penpot-Instanz '$name'${NC}"
    echo ""
    
    cd "$PENPOT_DIR/$name"
    docker-compose logs -f
}

# === BACKUP FUNCTIONS ===

backup_instance() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Penpot-Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    # Backup-Ordner f√ºr Instanz erstellen
    local backup_dir="$BACKUPS_DIR/$name"
    mkdir -p "$backup_dir"
    
    # Zeitstempel f√ºr Backup
    local timestamp=$(date "+%Y%m%d_%H%M%S")
    local backup_name="${name}_${timestamp}"
    local backup_path="$backup_dir/$backup_name"
    
    echo -e "${YELLOW}üíæ Erstelle Backup f√ºr Penpot-Instanz '$name'...${NC}"
    echo -e "${BLUE}üìÅ Backup-Name: $backup_name${NC}"
    
    # Pr√ºfen ob Instanz l√§uft
    local was_running=false
    if docker ps --format "table {{.Names}}" | grep -q "penpot-${name}-frontend"; then
        was_running=true
    else
        echo -e "${BLUE}üí° Starte Instanz f√ºr Backup...${NC}"
        cd "$PENPOT_DIR/$name"
        docker-compose up -d >/dev/null 2>&1
        sleep 3
    fi
    
    # Backup-Ordner erstellen
    mkdir -p "$backup_path"
    
    echo -e "${BLUE}  üìÅ Sichere Konfiguration...${NC}"
    # Konfigurationsdateien sichern
    tar -czf "$backup_path/config.tar.gz" -C "$PENPOT_DIR/$name" \
        docker-compose.yml .env 2>/dev/null
    
    echo -e "${BLUE}  üóÑÔ∏è  Sichere PostgreSQL-Datenbank...${NC}"
    # Datenbank-Backup
    source "$PENPOT_DIR/$name/.env"
    docker exec "penpot-${name}-postgres" pg_dump \
        -U "$POSTGRES_USER" \
        -d "$POSTGRES_DB" > "$backup_path/database.sql" 2>/dev/null
    
    if [ $? -eq 0 ] && [ -s "$backup_path/database.sql" ]; then
        gzip "$backup_path/database.sql"
        echo -e "${GREEN}    ‚úÖ Datenbank gesichert${NC}"
    else
        echo -e "${YELLOW}    ‚ö†Ô∏è  Datenbank-Backup √ºbersprungen (leer oder Fehler)${NC}"
        rm -f "$backup_path/database.sql" 2>/dev/null
    fi
    
    echo -e "${BLUE}  üìÅ Sichere Assets...${NC}"
    # Assets-Volume sichern (falls vorhanden)
    docker run --rm -v "$(basename "$PENPOT_DIR/$name")_penpot_assets":/source \
        -v "$backup_path":/backup alpine \
        tar -czf /backup/assets.tar.gz -C /source . 2>/dev/null || true
    
    # Backup-Info erstellen
    cat > "$backup_path/backup_info.txt" << EOF
Penpot Backup Information
=========================
Instance: $name
Created: $(date)
Type: Penpot Design Tool
Components: Configuration, Database, Assets

Restore Command:
./penpot restore $name $backup_name
EOF
    
    # Instanz wieder stoppen falls sie nicht lief
    if [ "$was_running" = false ]; then
        echo -e "${BLUE}üí° Stoppe Instanz wieder...${NC}"
        cd "$PENPOT_DIR/$name"
        docker-compose down >/dev/null 2>&1
    fi
    
    # Backup-Gr√∂√üe ermitteln
    local backup_size=$(du -sh "$backup_path" | cut -f1)
    
    echo -e "${GREEN}‚úÖ Backup erfolgreich erstellt!${NC}"
    echo -e "${BLUE}üìÅ Pfad: penpot-backups/$name/$backup_name${NC}"
    echo -e "${BLUE}üì¶ Gr√∂√üe: $backup_size${NC}"
    echo ""
    echo -e "${YELLOW}üí° Wiederherstellen mit:${NC}"
    echo -e "   ./penpot restore $name $backup_name"
}

restore_instance() {
    local name=$1
    local backup_name=$2
    
    if [ -z "$name" ] || [ -z "$backup_name" ]; then
        echo -e "${RED}‚ùå Instanzname und Backup-Name erforderlich${NC}"
        echo -e "${BLUE}Verwendung: ./penpot restore <instance> <backup>${NC}"
        exit 1
    fi
    
    local backup_path="$BACKUPS_DIR/$name/$backup_name"
    
    if [ ! -d "$backup_path" ]; then
        echo -e "${RED}‚ùå Backup '$backup_name' f√ºr Instanz '$name' nicht gefunden${NC}"
        echo -e "${BLUE}üí° Verf√ºgbare Backups anzeigen: ./penpot backups${NC}"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Ziel-Instanz '$name' existiert nicht${NC}"
        echo -e "${BLUE}üí° Erstelle zuerst eine Instanz: ./penpot create $name${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}üîÑ Stelle Backup wieder her...${NC}"
    echo -e "${BLUE}üìÅ Backup: $backup_name${NC}"
    echo -e "${RED}‚ö†Ô∏è  WARNUNG: Aktuelle Daten werden √ºberschrieben!${NC}"
    echo ""
    read -p "Fortfahren? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}Abgebrochen${NC}"
        exit 0
    fi
    
    # Instanz stoppen
    echo -e "${BLUE}‚èπÔ∏è  Stoppe Instanz...${NC}"
    cd "$PENPOT_DIR/$name"
    docker-compose down >/dev/null 2>&1
    
    # Backup-Info anzeigen
    if [ -f "$backup_path/backup_info.txt" ]; then
        echo -e "${BLUE}üìã Backup-Info:${NC}"
        cat "$backup_path/backup_info.txt"
        echo ""
    fi
    
    echo -e "${BLUE}  üìÅ Stelle Konfiguration wieder her...${NC}"
    # Konfiguration wiederherstellen
    if [ -f "$backup_path/config.tar.gz" ]; then
        tar -xzf "$backup_path/config.tar.gz" -C "$PENPOT_DIR/$name/"
    fi
    
    # Datenbank wiederherstellen
    if [ -f "$backup_path/database.sql.gz" ]; then
        echo -e "${BLUE}  üóÑÔ∏è  Stelle Datenbank wieder her...${NC}"
        
        # Instanz starten f√ºr DB-Restore
        docker-compose up -d >/dev/null 2>&1
        sleep 5
        
        # Datenbank-Restore
        source "$PENPOT_DIR/$name/.env"
        gunzip -c "$backup_path/database.sql.gz" | \
            docker exec -i "penpot-${name}-postgres" psql \
            -U "$POSTGRES_USER" \
            -d "$POSTGRES_DB" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}    ‚úÖ Datenbank wiederhergestellt${NC}"
        else
            echo -e "${RED}    ‚ùå Datenbank-Restore fehlgeschlagen${NC}"
        fi
    fi
    
    # Assets wiederherstellen (falls vorhanden)
    if [ -f "$backup_path/assets.tar.gz" ]; then
        echo -e "${BLUE}  üìÅ Stelle Assets wieder her...${NC}"
        docker run --rm -v "$(basename "$PENPOT_DIR/$name")_penpot_assets":/target \
            -v "$backup_path":/backup alpine \
            tar -xzf /backup/assets.tar.gz -C /target 2>/dev/null || true
    fi
    
    # Instanz neu starten
    echo -e "${BLUE}üîÑ Starte Instanz neu...${NC}"
    docker-compose restart >/dev/null 2>&1
    
    echo -e "${GREEN}‚úÖ Backup erfolgreich wiederhergestellt!${NC}"
    echo ""
    show_urls "$name"
}

list_backups() {
    if [ ! -d "$BACKUPS_DIR" ] || [ -z "$(ls -A "$BACKUPS_DIR" 2>/dev/null)" ]; then
        echo -e "${YELLOW}üì¶ Keine Penpot-Backups vorhanden${NC}"
        echo ""
        echo -e "${BLUE}üí° Backup erstellen: ./penpot backup <instance>${NC}"
        return
    fi
    
    echo -e "${GREEN}üì¶ Verf√ºgbare Penpot-Backups${NC}"
    echo ""
    
    for instance_dir in "$BACKUPS_DIR"/*; do
        if [ -d "$instance_dir" ]; then
            local instance=$(basename "$instance_dir")
            echo -e "${BLUE}üé® $instance${NC}"
            
            for backup_dir in "$instance_dir"/*; do
                if [ -d "$backup_dir" ]; then
                    local backup=$(basename "$backup_dir")
                    local backup_size=$(du -sh "$backup_dir" 2>/dev/null | cut -f1)
                    
                    echo -e "    üìÅ ${YELLOW}$backup${NC} (${backup_size})"
                    
                    # Backup-Inhalt anzeigen
                    local files=""
                    [ -f "$backup_dir/config.tar.gz" ] && files="${files}‚öôÔ∏èConfig "
                    [ -f "$backup_dir/database.sql.gz" ] && files="${files}üóÑÔ∏èDB "
                    [ -f "$backup_dir/assets.tar.gz" ] && files="${files}üìÅAssets "
                    
                    if [ -n "$files" ]; then
                        echo -e "       üì¶ $files"
                    fi
                    echo ""
                fi
            done
        fi
    done
    
    echo -e "${BLUE}üí° Befehle:${NC}"
    echo "   ./penpot backup <instance>           - Neues Backup erstellen"
    echo "   ./penpot restore <instance> <backup> - Backup wiederherstellen"
}

# === REPAIR & CLEANUP ===

repair_instance() {
    local name=$1
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Instanzname erforderlich${NC}"
        echo "Verwendung: ./penpot repair <name>"
        exit 1
    fi
    
    if ! instance_exists "$name"; then
        echo -e "${RED}‚ùå Penpot-Instanz '$name' existiert nicht${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}üîß Repariere Penpot-Instanz '$name'${NC}"
    echo ""
    
    local instance_dir="$PENPOT_DIR/$name"
    cd "$instance_dir"
    
    echo -e "${BLUE}1. üõë Stoppe alle Container...${NC}"
    docker-compose down -v 2>/dev/null || true
    
    echo -e "${BLUE}2. üóëÔ∏è  Entferne verwaiste Container...${NC}"
    docker container prune -f >/dev/null 2>&1
    
    echo -e "${BLUE}3. üóÑÔ∏è  Entferne verwaiste Volumes...${NC}"
    # Entferne nur spezifische Volumes f√ºr diese Instanz
    local instance_volumes=$(docker volume ls -q | grep "${name}" || true)
    if [ -n "$instance_volumes" ]; then
        echo "$instance_volumes" | xargs docker volume rm -f 2>/dev/null || true
    fi
    
    echo -e "${BLUE}4. üåê Entferne verwaiste Netzwerke...${NC}"
    docker network prune -f >/dev/null 2>&1
    
    echo -e "${BLUE}5. üîÑ Ziehe neueste Penpot-Images...${NC}"
    docker-compose pull >/dev/null 2>&1
    
    echo -e "${BLUE}6. üöÄ Starte Instanz neu...${NC}"
    docker-compose up -d >/dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Penpot-Instanz '$name' erfolgreich repariert!${NC}"
        echo ""
        
        # Kurz warten und Status pr√ºfen
        sleep 3
        
        # Status der Container pr√ºfen
        local running_containers=$(docker ps --format "table {{.Names}}" | grep "penpot-$name" | wc -l)
        if [ $running_containers -gt 0 ]; then
            echo -e "${GREEN}‚úÖ Container laufen wieder${NC}"
            echo ""
            show_urls "$name"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Container sind gestartet, aber m√∂glicherweise nicht alle bereit${NC}"
            echo -e "${BLUE}üí° Pr√ºfen Sie den Status mit: ./penpot list${NC}"
        fi
    else
        echo -e "${RED}‚ùå Fehler beim Starten der reparierten Instanz${NC}"
        echo -e "${BLUE}üí° Logs anzeigen: ./penpot logs $name${NC}"
        exit 1
    fi
}

cleanup_docker() {
    echo -e "${YELLOW}üßπ Docker-System bereinigen (Penpot)...${NC}"
    echo ""
    
    echo -e "${BLUE}üìä Aktuelle Docker-Nutzung:${NC}"
    docker system df
    echo ""
    
    echo -e "${YELLOW}‚ö†Ô∏è  Diese erweiterte Bereinigung entfernt:${NC}"
    echo "  ‚Ä¢ Verwaiste Container (orphaned containers)"
    echo "  ‚Ä¢ Ungenutzte Netzwerke (unused networks)"
    echo "  ‚Ä¢ Verwaiste Images (dangling images)"
    echo "  ‚Ä¢ Build-Cache (build cache)"
    echo "  ‚Ä¢ Verwaiste Dateien in penpot-instances/ (ohne aktive Instanz)"
    echo "  ‚Ä¢ Verwaiste SSL-Zertifikate"
    echo ""
    echo -e "${RED}‚ö†Ô∏è  Penpot-Instanzen werden NICHT betroffen!${NC}"
    echo ""
    
    read -p "Erweiterte Bereinigung durchf√ºhren? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}‚è≠Ô∏è  Bereinigung abgebrochen${NC}"
        return
    fi
    
    echo -e "${BLUE}üóëÔ∏è  Entferne verwaiste Container und Netzwerke...${NC}"
    docker system prune -f
    echo ""
    
    echo -e "${BLUE}üóëÔ∏è  Entferne verwaiste Volumes...${NC}"
    docker volume prune -f
    echo ""
    
    echo -e "${BLUE}üóëÔ∏è  Suche nach verwaisten Dateien...${NC}"
    
    # Sammle aktive Instanzen
    local active_instances=()
    if [ -d "$PENPOT_DIR" ]; then
        for instance_dir in "$PENPOT_DIR"/*; do
            if [ -d "$instance_dir" ]; then
                local instance_name=$(basename "$instance_dir")
                active_instances+=("$instance_name")
            fi
        done
    fi
    
    # Pr√ºfe SSL-Verzeichnis auf verwaiste Zertifikate
    if [ -d "$SSL_DIR" ]; then
        echo -e "${BLUE}  üîç Pr√ºfe SSL-Zertifikate...${NC}"
        for ssl_dir in "$SSL_DIR"/*; do
            if [ -d "$ssl_dir" ]; then
                local ssl_name=$(basename "$ssl_dir")
                local found=false
                
                for active_instance in "${active_instances[@]}"; do
                    if [ "$ssl_name" = "$active_instance" ]; then
                        found=true
                        break
                    fi
                done
                
                if [ "$found" = false ]; then
                    echo -e "${YELLOW}    üóëÔ∏è  Entferne verwaistes SSL-Zertifikat: $ssl_name${NC}"
                    rm -rf "$ssl_dir"
                fi
            fi
        done
    fi
    
    # Docker-Images bereinigen (nur dangling)
    echo -e "${BLUE}üóëÔ∏è  Entferne verwaiste Docker-Images...${NC}"
    docker image prune -f >/dev/null 2>&1
    
    echo -e "${GREEN}‚úÖ Erweiterte Docker-Bereinigung abgeschlossen!${NC}"
    echo ""
    
    echo -e "${BLUE}üìä Neue Docker-Nutzung:${NC}"
    docker system df
    echo ""
    
    # Zeige aktive Instanzen
    if [ ${#active_instances[@]} -gt 0 ]; then
        echo -e "${BLUE}üí° Ihre aktiven Penpot-Instanzen:${NC}"
        for instance in "${active_instances[@]}"; do
            local status="gestoppt"
            if docker ps --format "table {{.Names}}" | grep -q "penpot-${instance}-frontend"; then
                status="${GREEN}l√§uft${NC}"
            else
                status="${YELLOW}gestoppt${NC}"
            fi
            echo -e "  ‚Ä¢ $instance ($status)"
        done
    else
        echo -e "${YELLOW}üì≠ Keine aktiven Penpot-Instanzen gefunden${NC}"
        echo -e "${BLUE}üí° Neue Instanz erstellen: ./penpot create <name>${NC}"
    fi
}

# === MAIN LOGIC ===

case ${1:-help} in
    create)
        shift
        create_instance "$@"
        ;;
    start)
        start_instance "$2"
        ;;
    stop)
        stop_instance "$2"
        ;;
    remove|delete)
        remove_instance "$2"
        ;;
    list|ls)
        list_instances
        ;;
    urls)
        show_urls "$2"
        ;;
    shell)
        shell_instance "$2"
        ;;
    logs)
        show_logs "$2"
        ;;
    backup)
        backup_instance "$2"
        ;;
    restore)
        restore_instance "$2" "$3"
        ;;
    backups)
        list_backups
        ;;
    repair)
        repair_instance "$2"
        ;;
    cleanup)
        cleanup_docker
        ;;
    ssl-setup|ssl)
        setup_ssl
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå Unbekannter Befehl: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
